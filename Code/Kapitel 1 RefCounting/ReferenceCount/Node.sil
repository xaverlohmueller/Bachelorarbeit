sil_stage canonical

import Builtin
import Swift
import SwiftShims

// static Swift.Process._argc : Swift.Int32
sil_global [fragile] @_TZvOs7Process5_argcVs5Int32 : $Int32

// globalinit_33_1BDF70FFC18749BAB495A73B459ED2F0_token5
sil_global private_external [fragile] @globalinit_33_1BDF70FFC18749BAB495A73B459ED2F0_token5 : $Builtin.Word

// static Swift.Process._unsafeArgv : Swift.UnsafeMutablePointer<Swift.UnsafeMutablePointer<Swift.Int8>>
sil_global [fragile] @_TZvOs7Process11_unsafeArgvGSpGSpVs4Int8__ : $UnsafeMutablePointer<UnsafeMutablePointer<Int8>>

// Swift._emptyStringStorage : Swift.UInt32
sil_global [fragile] @_Tvs19_emptyStringStorageVs6UInt32 : $UInt32

// _swiftEmptyArrayStorage
sil_global [fragile] @_swiftEmptyArrayStorage : $_SwiftEmptyArrayStorage

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<UnsafeMutablePointer<Int8>>) -> Int32 {
// %0                                             // user: %3
// %1                                             // user: %9
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<UnsafeMutablePointer<Int8>>):
  %2 = global_addr @_TZvOs7Process5_argcVs5Int32 : $*Int32 // user: %3
  store %0 to %2 : $*Int32                        // id: %3
  %4 = global_addr @globalinit_33_1BDF70FFC18749BAB495A73B459ED2F0_token5 : $*Builtin.Word // user: %5
  %5 = address_to_pointer %4 : $*Builtin.Word to $Builtin.RawPointer // user: %7
  // function_ref globalinit_33_1BDF70FFC18749BAB495A73B459ED2F0_func5
  %6 = function_ref @globalinit_33_1BDF70FFC18749BAB495A73B459ED2F0_func5 : $@convention(thin) () -> () // user: %7
  %7 = builtin "once"(%5 : $Builtin.RawPointer, %6 : $@convention(thin) () -> ()) : $()
  %8 = global_addr @_TZvOs7Process11_unsafeArgvGSpGSpVs4Int8__ : $*UnsafeMutablePointer<UnsafeMutablePointer<Int8>> // user: %9
  store %1 to %8 : $*UnsafeMutablePointer<UnsafeMutablePointer<Int8>> // id: %9
  %10 = tuple ()
  %11 = integer_literal $Builtin.Int32, 0         // user: %12
  %12 = struct $Int32 (%11 : $Builtin.Int32)      // user: %13
  return %12 : $Int32                             // id: %13
}

// Swift._didEnterMain (Swift.Int32, argv : Swift.UnsafeMutablePointer<Swift.UnsafeMutablePointer<Swift.Int8>>) -> ()
sil [transparent] [fragile] @_TFs13_didEnterMainFTVs5Int324argvGSpGSpVs4Int8___T_ : $@convention(thin) (Int32, UnsafeMutablePointer<UnsafeMutablePointer<Int8>>) -> ()

// Node.Node.init (A) -> Node.Node<A>
sil hidden @_TFC4Node4NodecfxGS0_x_ : $@convention(method) <T where T : Comparable, T : CustomStringConvertible> (@in T, @owned Node<T>) -> @owned Node<T> {
// %0                                             // users: %2, %19, %23
// %1                                             // users: %3, %8, %15, %20, %24
bb0(%0 : $*T, %1 : $Node<T>):
  debug_value_addr %0 : $*T, let, name "element", argno 1 // id: %2
  debug_value %1 : $Node<T>, let, name "self"     // id: %3
  %4 = alloc_stack $Optional<Node<T>>             // users: %5, %7, %10
  inject_enum_addr %4 : $*Optional<Node<T>>, #Optional.None!enumelt // id: %5
  %6 = tuple ()
  %7 = load %4 : $*Optional<Node<T>>              // user: %9
  %8 = ref_element_addr %1 : $Node<T>, #Node.left // user: %9
  store %7 to %8 : $*Optional<Node<T>>            // id: %9
  dealloc_stack %4 : $*Optional<Node<T>>          // id: %10
  %11 = alloc_stack $Optional<Node<T>>            // users: %12, %14, %17
  inject_enum_addr %11 : $*Optional<Node<T>>, #Optional.None!enumelt // id: %12
  %13 = tuple ()
  %14 = load %11 : $*Optional<Node<T>>            // user: %16
  %15 = ref_element_addr %1 : $Node<T>, #Node.right // user: %16
  store %14 to %15 : $*Optional<Node<T>>          // id: %16
  dealloc_stack %11 : $*Optional<Node<T>>         // id: %17
  %18 = alloc_stack $T                            // users: %19, %21, %22
  copy_addr %0 to [initialization] %18 : $*T      // id: %19
  %20 = ref_element_addr %1 : $Node<T>, #Node.element // user: %21
  copy_addr [take] %18 to [initialization] %20 : $*T // id: %21
  dealloc_stack %18 : $*T                         // id: %22
  destroy_addr %0 : $*T                           // id: %23
  return %1 : $Node<T>                            // id: %24
}

// Node.Node.__allocating_init (A) -> Node.Node<A>
sil hidden @_TFC4Node4NodeCfxGS0_x_ : $@convention(thin) <T where T : Comparable, T : CustomStringConvertible> (@in T, @thick Node<T>.Type) -> @owned Node<T> {
// %0                                             // user: %4
bb0(%0 : $*T, %1 : $@thick Node<T>.Type):
  %2 = alloc_ref $Node<T>                         // user: %4
  // function_ref Node.Node.init (A) -> Node.Node<A>
  %3 = function_ref @_TFC4Node4NodecfxGS0_x_ : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@in τ_0_0, @owned Node<τ_0_0>) -> @owned Node<τ_0_0> // user: %4
  %4 = apply %3<T>(%0, %2) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@in τ_0_0, @owned Node<τ_0_0>) -> @owned Node<τ_0_0> // user: %5
  return %4 : $Node<T>                            // id: %5
}

// Swift.Optional.init (nilLiteral : ()) -> Swift.Optional<A>
sil [transparent] [fragile] @_TFSqCfT10nilLiteralT__GSqx_ : $@convention(thin) <Wrapped> (@out Optional<Wrapped>, @thin Optional<Wrapped>.Type) -> ()

// Node.Node.__deallocating_deinit
sil hidden @_TFC4Node4NodeD : $@convention(method) <T where T : Comparable, T : CustomStringConvertible> (@owned Node<T>) -> () {
// %0                                             // users: %1, %3
bb0(%0 : $Node<T>):
  debug_value %0 : $Node<T>, let, name "self", argno 1 // id: %1
  // function_ref Node.Node.deinit
  %2 = function_ref @_TFC4Node4Noded : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2<T>(%0) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $Node<T> // user: %5
  dealloc_ref %4 : $Node<T>                       // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
}

// Node.Node.deinit
sil hidden @_TFC4Node4Noded : $@convention(method) <T where T : Comparable, T : CustomStringConvertible> (@guaranteed Node<T>) -> @owned Builtin.NativeObject {
// %0                                             // users: %1, %32, %57, %58, %60, %62
bb0(%0 : $Node<T>):
  debug_value %0 : $Node<T>, let, name "self", argno 1 // id: %1
  // function_ref Swift.print (Swift.Array<protocol<>>, separator : Swift.String, terminator : Swift.String) -> ()
  %2 = function_ref @_TFs5printFTGSaP__9separatorSS10terminatorSS_T_ : $@convention(thin) (@owned Array<protocol<>>, @owned String, @owned String) -> () // user: %55
  %3 = integer_literal $Builtin.Word, 1           // user: %5
  // function_ref generic specialization <protocol<>> of Swift._allocateUninitializedArray <A> (Builtin.Word) -> (Swift.Array<A>, Builtin.RawPointer)
  %4 = function_ref @_TTSg5P____TFs27_allocateUninitializedArrayurFBwTGSax_Bp_ : $@convention(thin) (Builtin.Word) -> @owned (Array<protocol<>>, Builtin.RawPointer) // user: %5
  %5 = apply %4(%3) : $@convention(thin) (Builtin.Word) -> @owned (Array<protocol<>>, Builtin.RawPointer) // users: %6, %7
  %6 = tuple_extract %5 : $(Array<protocol<>>, Builtin.RawPointer), 0 // user: %55
  %7 = tuple_extract %5 : $(Array<protocol<>>, Builtin.RawPointer), 1 // user: %8
  %8 = pointer_to_address %7 : $Builtin.RawPointer to $*protocol<> // user: %9
  %9 = init_existential_addr %8 : $*protocol<>, $String // user: %50
  // function_ref Swift.String.init (stringInterpolation : Swift.Array<Swift.String>...) -> Swift.String
  %10 = function_ref @_TFSSCft19stringInterpolationGSaSS__SS : $@convention(thin) (@owned Array<String>, @thin String.Type) -> @owned String // user: %49
  %11 = metatype $@thin String.Type               // user: %49
  %12 = integer_literal $Builtin.Word, 3          // user: %14
  // function_ref generic specialization <Swift.String> of Swift._allocateUninitializedArray <A> (Builtin.Word) -> (Swift.Array<A>, Builtin.RawPointer)
  %13 = function_ref @_TTSg5SS___TFs27_allocateUninitializedArrayurFBwTGSax_Bp_ : $@convention(thin) (Builtin.Word) -> @owned (Array<String>, Builtin.RawPointer) // user: %14
  %14 = apply %13(%12) : $@convention(thin) (Builtin.Word) -> @owned (Array<String>, Builtin.RawPointer) // users: %15, %16
  %15 = tuple_extract %14 : $(Array<String>, Builtin.RawPointer), 0 // user: %49
  %16 = tuple_extract %14 : $(Array<String>, Builtin.RawPointer), 1 // user: %17
  %17 = pointer_to_address %16 : $Builtin.RawPointer to $*String // users: %27, %29, %38
  // function_ref Swift.String.init (stringInterpolationSegment : Swift.String) -> Swift.String
  %18 = function_ref @_TFSSCfT26stringInterpolationSegmentSS_SS : $@convention(thin) (@owned String, @thin String.Type) -> @owned String // user: %26
  %19 = metatype $@thin String.Type               // user: %26
  // function_ref Swift.String.init (_builtinStringLiteral : Builtin.RawPointer, byteSize : Builtin.Word, isASCII : Builtin.Int1) -> Swift.String
  %20 = function_ref @_TFSSCfT21_builtinStringLiteralBp8byteSizeBw7isASCIIBi1__SS : $@convention(thin) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %25
  %21 = metatype $@thin String.Type               // user: %25
  %22 = string_literal utf8 "deinit Node #"       // user: %25
  %23 = integer_literal $Builtin.Word, 13         // user: %25
  %24 = integer_literal $Builtin.Int1, -1         // user: %25
  %25 = apply %20(%22, %23, %24, %21) : $@convention(thin) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %26
  %26 = apply %18(%25, %19) : $@convention(thin) (@owned String, @thin String.Type) -> @owned String // user: %27
  store %26 to %17 : $*String                     // id: %27
  %28 = integer_literal $Builtin.Word, 1          // user: %29
  %29 = index_addr %17 : $*String, %28 : $Builtin.Word // user: %36
  // function_ref Swift.String.init <A> (stringInterpolationSegment : A) -> Swift.String
  %30 = function_ref @_TFSSCurfT26stringInterpolationSegmentx_SS : $@convention(thin) <τ_0_0> (@in τ_0_0, @thin String.Type) -> @owned String // user: %35
  %31 = metatype $@thin String.Type               // user: %35
  %32 = ref_element_addr %0 : $Node<T>, #Node.element // user: %34
  %33 = alloc_stack $T                            // users: %34, %35, %56
  copy_addr %32 to [initialization] %33 : $*T     // id: %34
  %35 = apply %30<T>(%33, %31) : $@convention(thin) <τ_0_0> (@in τ_0_0, @thin String.Type) -> @owned String // user: %36
  store %35 to %29 : $*String                     // id: %36
  %37 = integer_literal $Builtin.Word, 2          // user: %38
  %38 = index_addr %17 : $*String, %37 : $Builtin.Word // user: %48
  // function_ref Swift.String.init (stringInterpolationSegment : Swift.String) -> Swift.String
  %39 = function_ref @_TFSSCfT26stringInterpolationSegmentSS_SS : $@convention(thin) (@owned String, @thin String.Type) -> @owned String // user: %47
  %40 = metatype $@thin String.Type               // user: %47
  // function_ref Swift.String.init (_builtinStringLiteral : Builtin.RawPointer, byteSize : Builtin.Word, isASCII : Builtin.Int1) -> Swift.String
  %41 = function_ref @_TFSSCfT21_builtinStringLiteralBp8byteSizeBw7isASCIIBi1__SS : $@convention(thin) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %46
  %42 = metatype $@thin String.Type               // user: %46
  %43 = string_literal utf8 ""                    // user: %46
  %44 = integer_literal $Builtin.Word, 0          // user: %46
  %45 = integer_literal $Builtin.Int1, -1         // user: %46
  %46 = apply %41(%43, %44, %45, %42) : $@convention(thin) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %47
  %47 = apply %39(%46, %40) : $@convention(thin) (@owned String, @thin String.Type) -> @owned String // user: %48
  store %47 to %38 : $*String                     // id: %48
  %49 = apply %10(%15, %11) : $@convention(thin) (@owned Array<String>, @thin String.Type) -> @owned String // user: %50
  store %49 to %9 : $*String                      // id: %50
  // function_ref Swift.(print (Swift.Array<protocol<>>, separator : Swift.String, terminator : Swift.String) -> ()).(default argument 1)
  %51 = function_ref @_TIFs5printFTGSaP__9separatorSS10terminatorSS_T_A0_ : $@convention(thin) () -> @owned String // user: %52
  %52 = apply %51() : $@convention(thin) () -> @owned String // user: %55
  // function_ref Swift.(print (Swift.Array<protocol<>>, separator : Swift.String, terminator : Swift.String) -> ()).(default argument 2)
  %53 = function_ref @_TIFs5printFTGSaP__9separatorSS10terminatorSS_T_A1_ : $@convention(thin) () -> @owned String // user: %54
  %54 = apply %53() : $@convention(thin) () -> @owned String // user: %55
  %55 = apply %2(%6, %52, %54) : $@convention(thin) (@owned Array<protocol<>>, @owned String, @owned String) -> ()
  dealloc_stack %33 : $*T                         // id: %56
  %57 = unchecked_ref_cast %0 : $Node<T> to $Builtin.NativeObject // user: %64
  %58 = ref_element_addr %0 : $Node<T>, #Node.element // user: %59
  destroy_addr %58 : $*T                          // id: %59
  %60 = ref_element_addr %0 : $Node<T>, #Node.left // user: %61
  destroy_addr %60 : $*Optional<Node<T>>          // id: %61
  %62 = ref_element_addr %0 : $Node<T>, #Node.right // user: %63
  destroy_addr %62 : $*Optional<Node<T>>          // id: %63
  return %57 : $Builtin.NativeObject              // id: %64
}

// Swift.print (Swift.Array<protocol<>>, separator : Swift.String, terminator : Swift.String) -> ()
sil [noinline] [_semantics "stdlib_binary_only"] @_TFs5printFTGSaP__9separatorSS10terminatorSS_T_ : $@convention(thin) (@owned Array<protocol<>>, @owned String, @owned String) -> ()

// Swift._allocateUninitializedArray <A> (Builtin.Word) -> (Swift.Array<A>, Builtin.RawPointer)
sil [fragile] [always_inline] @_TFs27_allocateUninitializedArrayurFBwTGSax_Bp_ : $@convention(thin) <Element> (Builtin.Word) -> @owned (Array<Element>, Builtin.RawPointer)

// Swift.String.init (stringInterpolation : Swift.Array<Swift.String>...) -> Swift.String
sil [fragile] [readonly] @_TFSSCft19stringInterpolationGSaSS__SS : $@convention(thin) (@owned Array<String>, @thin String.Type) -> @owned String

// Swift.String.init (stringInterpolationSegment : Swift.String) -> Swift.String
sil [fragile] @_TFSSCfT26stringInterpolationSegmentSS_SS : $@convention(thin) (@owned String, @thin String.Type) -> @owned String

// Swift.String.init (_builtinStringLiteral : Builtin.RawPointer, byteSize : Builtin.Word, isASCII : Builtin.Int1) -> Swift.String
sil [fragile] [readonly] [_semantics "string.makeUTF8"] @_TFSSCfT21_builtinStringLiteralBp8byteSizeBw7isASCIIBi1__SS : $@convention(thin) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String

// Swift.String.init <A> (stringInterpolationSegment : A) -> Swift.String
sil [fragile] @_TFSSCurfT26stringInterpolationSegmentx_SS : $@convention(thin) <T> (@in T, @thin String.Type) -> @owned String

// Swift.(print (Swift.Array<protocol<>>, separator : Swift.String, terminator : Swift.String) -> ()).(default argument 1)
sil [noinline] [_semantics "stdlib_binary_only"] @_TIFs5printFTGSaP__9separatorSS10terminatorSS_T_A0_ : $@convention(thin) () -> @owned String

// Swift.(print (Swift.Array<protocol<>>, separator : Swift.String, terminator : Swift.String) -> ()).(default argument 2)
sil [noinline] [_semantics "stdlib_binary_only"] @_TIFs5printFTGSaP__9separatorSS10terminatorSS_T_A1_ : $@convention(thin) () -> @owned String

// Node.Node.element.getter : A
sil hidden [transparent] @_TFC4Node4Nodeg7elementx : $@convention(method) <T where T : Comparable, T : CustomStringConvertible> (@out T, @guaranteed Node<T>) -> () {
// %0                                             // user: %4
// %1                                             // users: %2, %3
bb0(%0 : $*T, %1 : $Node<T>):
  debug_value %1 : $Node<T>, let, name "self", argno 1 // id: %2
  %3 = ref_element_addr %1 : $Node<T>, #Node.element // user: %4
  copy_addr %3 to [initialization] %0 : $*T       // id: %4
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
}

// Node.Node.element.setter : A
sil hidden [transparent] @_TFC4Node4Nodes7elementx : $@convention(method) <T where T : Comparable, T : CustomStringConvertible> (@in T, @guaranteed Node<T>) -> () {
// %0                                             // users: %2, %5, %9
// %1                                             // users: %3, %6
bb0(%0 : $*T, %1 : $Node<T>):
  debug_value_addr %0 : $*T, let, name "value", argno 1 // id: %2
  debug_value %1 : $Node<T>, let, name "self", argno 2 // id: %3
  %4 = alloc_stack $T                             // users: %5, %7, %8
  copy_addr %0 to [initialization] %4 : $*T       // id: %5
  %6 = ref_element_addr %1 : $Node<T>, #Node.element // user: %7
  copy_addr [take] %4 to %6 : $*T                 // id: %7
  dealloc_stack %4 : $*T                          // id: %8
  destroy_addr %0 : $*T                           // id: %9
  %10 = tuple ()                                  // user: %11
  return %10 : $()                                // id: %11
}

// Node.Node.element.materializeForSet : A
sil hidden [transparent] @_TFC4Node4Nodem7elementx : $@convention(method) <T where T : Comparable, T : CustomStringConvertible> (Builtin.RawPointer, @inout Builtin.UnsafeValueBuffer, @guaranteed Node<T>) -> (Builtin.RawPointer, Optional<@convention(thin) (Builtin.RawPointer, inout Builtin.UnsafeValueBuffer, inout Node<T>, @thick Node<T>.Type) -> ()>) {
// %2                                             // user: %3
bb0(%0 : $Builtin.RawPointer, %1 : $*Builtin.UnsafeValueBuffer, %2 : $Node<T>):
  %3 = ref_element_addr %2 : $Node<T>, #Node.element // user: %4
  %4 = address_to_pointer %3 : $*T to $Builtin.RawPointer // user: %6
  %5 = enum $Optional<@convention(thin) (Builtin.RawPointer, inout Builtin.UnsafeValueBuffer, inout Node<T>, @thick Node<T>.Type) -> ()>, #Optional.None!enumelt // user: %6
  %6 = tuple (%4 : $Builtin.RawPointer, %5 : $Optional<@convention(thin) (Builtin.RawPointer, inout Builtin.UnsafeValueBuffer, inout Node<T>, @thick Node<T>.Type) -> ()>) // user: %7
  return %6 : $(Builtin.RawPointer, Optional<@convention(thin) (Builtin.RawPointer, inout Builtin.UnsafeValueBuffer, inout Node<T>, @thick Node<T>.Type) -> ()>) // id: %7
}

// Node.Node.addNode (A) -> ()
sil hidden @_TFC4Node4Node7addNodefxT_ : $@convention(method) <T where T : Comparable, T : CustomStringConvertible> (@in T, @guaranteed Node<T>) -> () {
// %0                                             // users: %2, %7, %24, %32, %45, %62, %70, %81
// %1                                             // users: %3, %8, %16, %35, %46, %54, %73
bb0(%0 : $*T, %1 : $Node<T>):
  debug_value_addr %0 : $*T, let, name "newElement", argno 1 // id: %2
  debug_value %1 : $Node<T>, let, name "self", argno 2 // id: %3
  %4 = witness_method $T, #Comparable."<"!1 : $@convention(witness_method) <τ_0_0 where τ_0_0 : Comparable> (@in τ_0_0, @in τ_0_0, @thick τ_0_0.Type) -> Bool // user: %11
  %5 = metatype $@thick T.Type                    // user: %11
  %6 = alloc_stack $T                             // users: %7, %11, %14
  copy_addr %0 to [initialization] %6 : $*T       // id: %7
  %8 = ref_element_addr %1 : $Node<T>, #Node.element // user: %10
  %9 = alloc_stack $T                             // users: %10, %11, %13
  copy_addr %8 to [initialization] %9 : $*T       // id: %10
  %11 = apply %4<T>(%6, %9, %5) : $@convention(witness_method) <τ_0_0 where τ_0_0 : Comparable> (@in τ_0_0, @in τ_0_0, @thick τ_0_0.Type) -> Bool // user: %12
  %12 = struct_extract %11 : $Bool, #Bool._value  // user: %15
  dealloc_stack %9 : $*T                          // id: %13
  dealloc_stack %6 : $*T                          // id: %14
  cond_br %12, bb1, bb5                           // id: %15

bb1:                                              // Preds: bb0
  %16 = ref_element_addr %1 : $Node<T>, #Node.left // user: %17
  %17 = load %16 : $*Optional<Node<T>>            // users: %18, %19
  retain_value %17 : $Optional<Node<T>>           // id: %18
  switch_enum %17 : $Optional<Node<T>>, case #Optional.Some!enumelt.1: bb2, default bb3 // id: %19

// %20                                            // users: %21, %25, %27
bb2(%20 : $Node<T>):                              // Preds: bb1
  debug_value %20 : $Node<T>, let, name "left"    // id: %21
  // function_ref Node.Node.addNode (A) -> ()
  %22 = function_ref @_TFC4Node4Node7addNodefxT_ : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@in τ_0_0, @guaranteed Node<τ_0_0>) -> () // user: %25
  %23 = alloc_stack $T                            // users: %24, %25, %26
  copy_addr %0 to [initialization] %23 : $*T      // id: %24
  %25 = apply %22<T>(%23, %20) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@in τ_0_0, @guaranteed Node<τ_0_0>) -> ()
  dealloc_stack %23 : $*T                         // id: %26
  strong_release %20 : $Node<T>                   // id: %27
  br bb4                                          // id: %28

bb3:                                              // Preds: bb1
  // function_ref Node.Node.__allocating_init (A) -> Node.Node<A>
  %29 = function_ref @_TFC4Node4NodeCfxGS0_x_ : $@convention(thin) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@in τ_0_0, @thick Node<τ_0_0>.Type) -> @owned Node<τ_0_0> // user: %33
  %30 = metatype $@thick Node<T>.Type             // user: %33
  %31 = alloc_stack $T                            // users: %32, %33, %39
  copy_addr %0 to [initialization] %31 : $*T      // id: %32
  %33 = apply %29<T>(%31, %30) : $@convention(thin) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@in τ_0_0, @thick Node<τ_0_0>.Type) -> @owned Node<τ_0_0> // user: %34
  %34 = enum $Optional<Node<T>>, #Optional.Some!enumelt.1, %33 : $Node<T> // user: %37
  %35 = ref_element_addr %1 : $Node<T>, #Node.left // users: %36, %37
  %36 = load %35 : $*Optional<Node<T>>            // user: %38
  store %34 to %35 : $*Optional<Node<T>>          // id: %37
  release_value %36 : $Optional<Node<T>>          // id: %38
  dealloc_stack %31 : $*T                         // id: %39
  br bb4                                          // id: %40

bb4:                                              // Preds: bb2 bb3
  br bb11                                         // id: %41

bb5:                                              // Preds: bb0
  %42 = witness_method $T, #Comparable.">"!1 : $@convention(witness_method) <τ_0_0 where τ_0_0 : Comparable> (@in τ_0_0, @in τ_0_0, @thick τ_0_0.Type) -> Bool // user: %49
  %43 = metatype $@thick T.Type                   // user: %49
  %44 = alloc_stack $T                            // users: %45, %49, %52
  copy_addr %0 to [initialization] %44 : $*T      // id: %45
  %46 = ref_element_addr %1 : $Node<T>, #Node.element // user: %48
  %47 = alloc_stack $T                            // users: %48, %49, %51
  copy_addr %46 to [initialization] %47 : $*T     // id: %48
  %49 = apply %42<T>(%44, %47, %43) : $@convention(witness_method) <τ_0_0 where τ_0_0 : Comparable> (@in τ_0_0, @in τ_0_0, @thick τ_0_0.Type) -> Bool // user: %50
  %50 = struct_extract %49 : $Bool, #Bool._value  // user: %53
  dealloc_stack %47 : $*T                         // id: %51
  dealloc_stack %44 : $*T                         // id: %52
  cond_br %50, bb6, bb10                          // id: %53

bb6:                                              // Preds: bb5
  %54 = ref_element_addr %1 : $Node<T>, #Node.right // user: %55
  %55 = load %54 : $*Optional<Node<T>>            // users: %56, %57
  retain_value %55 : $Optional<Node<T>>           // id: %56
  switch_enum %55 : $Optional<Node<T>>, case #Optional.Some!enumelt.1: bb7, default bb8 // id: %57

// %58                                            // users: %59, %63, %65
bb7(%58 : $Node<T>):                              // Preds: bb6
  debug_value %58 : $Node<T>, let, name "right"   // id: %59
  // function_ref Node.Node.addNode (A) -> ()
  %60 = function_ref @_TFC4Node4Node7addNodefxT_ : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@in τ_0_0, @guaranteed Node<τ_0_0>) -> () // user: %63
  %61 = alloc_stack $T                            // users: %62, %63, %64
  copy_addr %0 to [initialization] %61 : $*T      // id: %62
  %63 = apply %60<T>(%61, %58) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@in τ_0_0, @guaranteed Node<τ_0_0>) -> ()
  dealloc_stack %61 : $*T                         // id: %64
  strong_release %58 : $Node<T>                   // id: %65
  br bb9                                          // id: %66

bb8:                                              // Preds: bb6
  // function_ref Node.Node.__allocating_init (A) -> Node.Node<A>
  %67 = function_ref @_TFC4Node4NodeCfxGS0_x_ : $@convention(thin) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@in τ_0_0, @thick Node<τ_0_0>.Type) -> @owned Node<τ_0_0> // user: %71
  %68 = metatype $@thick Node<T>.Type             // user: %71
  %69 = alloc_stack $T                            // users: %70, %71, %77
  copy_addr %0 to [initialization] %69 : $*T      // id: %70
  %71 = apply %67<T>(%69, %68) : $@convention(thin) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@in τ_0_0, @thick Node<τ_0_0>.Type) -> @owned Node<τ_0_0> // user: %72
  %72 = enum $Optional<Node<T>>, #Optional.Some!enumelt.1, %71 : $Node<T> // user: %75
  %73 = ref_element_addr %1 : $Node<T>, #Node.right // users: %74, %75
  %74 = load %73 : $*Optional<Node<T>>            // user: %76
  store %72 to %73 : $*Optional<Node<T>>          // id: %75
  release_value %74 : $Optional<Node<T>>          // id: %76
  dealloc_stack %69 : $*T                         // id: %77
  br bb9                                          // id: %78

bb9:                                              // Preds: bb7 bb8
  br bb10                                         // id: %79

bb10:                                             // Preds: bb5 bb9
  br bb11                                         // id: %80

bb11:                                             // Preds: bb4 bb10
  destroy_addr %0 : $*T                           // id: %81
  %82 = tuple ()                                  // user: %83
  return %82 : $()                                // id: %83
}

// Swift.Bool._getBuiltinLogicValue () -> Builtin.Int1
sil [transparent] [fragile] @_TFSb21_getBuiltinLogicValuefT_Bi1_ : $@convention(method) (Bool) -> Builtin.Int1

// Node.Node.copy () -> Node.Node<A>
sil hidden @_TFC4Node4Node4copyfT_GS0_x_ : $@convention(method) <T where T : Comparable, T : CustomStringConvertible> (@guaranteed Node<T>) -> @owned Node<T> {
// %0                                             // users: %1, %4, %24, %41, %52, %70
bb0(%0 : $Node<T>):
  debug_value %0 : $Node<T>, let, name "self", argno 1 // id: %1
  %2 = alloc_stack $T, let, name "element"        // users: %34, %42, %47, %87, %88
  %3 = alloc_stack $T                             // users: %5, %7, %12, %16
  %4 = ref_element_addr %0 : $Node<T>, #Node.element // user: %5
  copy_addr %4 to [initialization] %3 : $*T       // id: %5
  %6 = alloc_stack $NSObject                      // users: %7, %8, %11, %15
  checked_cast_addr_br take_always T in %3 : $*T to NSObject in %6 : $*NSObject, bb1, bb2 // id: %7

bb1:                                              // Preds: bb0
  %8 = load %6 : $*NSObject                       // user: %10
  %9 = integer_literal $Builtin.Int1, -1          // user: %13
  strong_release %8 : $NSObject                   // id: %10
  dealloc_stack %6 : $*NSObject                   // id: %11
  dealloc_stack %3 : $*T                          // id: %12
  br bb3(%9 : $Builtin.Int1)                      // id: %13

bb2:                                              // Preds: bb0
  %14 = integer_literal $Builtin.Int1, 0          // user: %17
  dealloc_stack %6 : $*NSObject                   // id: %15
  dealloc_stack %3 : $*T                          // id: %16
  br bb3(%14 : $Builtin.Int1)                     // id: %17

// %18                                            // user: %19
bb3(%18 : $Builtin.Int1):                         // Preds: bb1 bb2
  %19 = struct $Bool (%18 : $Builtin.Int1)        // user: %20
  %20 = struct_extract %19 : $Bool, #Bool._value  // user: %21
  cond_br %20, bb4, bb5                           // id: %21

bb4:                                              // Preds: bb3
  %22 = alloc_stack $AnyObject                    // users: %31, %33, %39
  %23 = alloc_stack $T                            // users: %25, %27, %38
  %24 = ref_element_addr %0 : $Node<T>, #Node.element // user: %25
  copy_addr %24 to [initialization] %23 : $*T     // id: %25
  %26 = alloc_stack $NSObject                     // users: %27, %28, %37
  unconditional_checked_cast_addr take_always T in %23 : $*T to NSObject in %26 : $*NSObject // id: %27
  %28 = load %26 : $*NSObject                     // users: %29, %30, %36
  %29 = class_method [volatile] %28 : $NSObject, #NSObject.copy!1.foreign : NSObject -> () -> AnyObject , $@convention(objc_method) (NSObject) -> @owned AnyObject // user: %30
  %30 = apply %29(%28) : $@convention(objc_method) (NSObject) -> @owned AnyObject // user: %31
  store %30 to %22 : $*AnyObject                  // id: %31
  %32 = alloc_stack $T                            // users: %33, %34, %35
  unconditional_checked_cast_addr take_always AnyObject in %22 : $*AnyObject to T in %32 : $*T // id: %33
  copy_addr [take] %32 to [initialization] %2 : $*T // id: %34
  dealloc_stack %32 : $*T                         // id: %35
  strong_release %28 : $NSObject                  // id: %36
  dealloc_stack %26 : $*NSObject                  // id: %37
  dealloc_stack %23 : $*T                         // id: %38
  dealloc_stack %22 : $*AnyObject                 // id: %39
  br bb6                                          // id: %40

bb5:                                              // Preds: bb3
  %41 = ref_element_addr %0 : $Node<T>, #Node.element // user: %42
  copy_addr %41 to [initialization] %2 : $*T      // id: %42
  br bb6                                          // id: %43

bb6:                                              // Preds: bb4 bb5
  // function_ref Node.Node.__allocating_init (A) -> Node.Node<A>
  %44 = function_ref @_TFC4Node4NodeCfxGS0_x_ : $@convention(thin) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@in τ_0_0, @thick Node<τ_0_0>.Type) -> @owned Node<τ_0_0> // user: %48
  %45 = metatype $@thick Node<T>.Type             // user: %48
  %46 = alloc_stack $T                            // users: %47, %48, %50
  copy_addr %2 to [initialization] %46 : $*T      // id: %47
  %48 = apply %44<T>(%46, %45) : $@convention(thin) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@in τ_0_0, @thick Node<τ_0_0>.Type) -> @owned Node<τ_0_0> // users: %49, %65, %83, %89
  debug_value %48 : $Node<T>, let, name "node"    // id: %49
  dealloc_stack %46 : $*T                         // id: %50
  // function_ref Node.Node.copy () -> Node.Node<A>
  %51 = function_ref @_TFC4Node4Node4copyfT_GS0_x_ : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned Node<τ_0_0> // user: %60
  %52 = ref_element_addr %0 : $Node<T>, #Node.left // users: %55, %57
  %53 = integer_literal $Builtin.Int1, -1         // user: %55
  %54 = integer_literal $Builtin.Int1, 0          // user: %55
  %55 = select_enum_addr %52 : $*Optional<Node<T>>, case #Optional.Some!enumelt.1: %53, default %54 : $Builtin.Int1 // user: %56
  cond_br %55, bb7, bb12                          // id: %56

bb7:                                              // Preds: bb6
  %57 = unchecked_take_enum_data_addr %52 : $*Optional<Node<T>>, #Optional.Some!enumelt.1 // user: %58
  %58 = load %57 : $*Node<T>                      // users: %59, %60, %61
  strong_retain %58 : $Node<T>                    // id: %59
  %60 = apply %51<T>(%58) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned Node<τ_0_0> // user: %62
  strong_release %58 : $Node<T>                   // id: %61
  %62 = enum $Optional<Node<T>>, #Optional.Some!enumelt.1, %60 : $Node<T> // user: %63
  br bb8(%62 : $Optional<Node<T>>)                // id: %63

// %64                                            // user: %67
bb8(%64 : $Optional<Node<T>>):                    // Preds: bb7 bb12
  %65 = ref_element_addr %48 : $Node<T>, #Node.left // users: %66, %67
  %66 = load %65 : $*Optional<Node<T>>            // user: %68
  store %64 to %65 : $*Optional<Node<T>>          // id: %67
  release_value %66 : $Optional<Node<T>>          // id: %68
  // function_ref Node.Node.copy () -> Node.Node<A>
  %69 = function_ref @_TFC4Node4Node4copyfT_GS0_x_ : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned Node<τ_0_0> // user: %78
  %70 = ref_element_addr %0 : $Node<T>, #Node.right // users: %73, %75
  %71 = integer_literal $Builtin.Int1, -1         // user: %73
  %72 = integer_literal $Builtin.Int1, 0          // user: %73
  %73 = select_enum_addr %70 : $*Optional<Node<T>>, case #Optional.Some!enumelt.1: %71, default %72 : $Builtin.Int1 // user: %74
  cond_br %73, bb9, bb11                          // id: %74

bb9:                                              // Preds: bb8
  %75 = unchecked_take_enum_data_addr %70 : $*Optional<Node<T>>, #Optional.Some!enumelt.1 // user: %76
  %76 = load %75 : $*Node<T>                      // users: %77, %78, %79
  strong_retain %76 : $Node<T>                    // id: %77
  %78 = apply %69<T>(%76) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned Node<τ_0_0> // user: %80
  strong_release %76 : $Node<T>                   // id: %79
  %80 = enum $Optional<Node<T>>, #Optional.Some!enumelt.1, %78 : $Node<T> // user: %81
  br bb10(%80 : $Optional<Node<T>>)               // id: %81

// %82                                            // user: %85
bb10(%82 : $Optional<Node<T>>):                   // Preds: bb9 bb11
  %83 = ref_element_addr %48 : $Node<T>, #Node.right // users: %84, %85
  %84 = load %83 : $*Optional<Node<T>>            // user: %86
  store %82 to %83 : $*Optional<Node<T>>          // id: %85
  release_value %84 : $Optional<Node<T>>          // id: %86
  destroy_addr %2 : $*T                           // id: %87
  dealloc_stack %2 : $*T                          // id: %88
  return %48 : $Node<T>                           // id: %89

bb11:                                             // Preds: bb8
  %90 = enum $Optional<Node<T>>, #Optional.None!enumelt // user: %91
  br bb10(%90 : $Optional<Node<T>>)               // id: %91

bb12:                                             // Preds: bb6
  %92 = enum $Optional<Node<T>>, #Optional.None!enumelt // user: %93
  br bb8(%92 : $Optional<Node<T>>)                // id: %93
}

// Swift._getBool (Builtin.Int1) -> Swift.Bool
sil [transparent] [fragile] @_TFs8_getBoolFBi1_Sb : $@convention(thin) (Builtin.Int1) -> Bool

// Node.Node.description.getter : Swift.String
sil hidden @_TFC4Node4Nodeg11descriptionSS : $@convention(method) <T where T : Comparable, T : CustomStringConvertible> (@guaranteed Node<T>) -> @owned String {
// %0                                             // users: %2, %3, %11, %35
bb0(%0 : $Node<T>):
  %1 = alloc_stack $String, var, name "desc"      // users: %9, %31, %44, %56, %57, %61, %63, %64
  debug_value %0 : $Node<T>, let, name "self", argno 1 // id: %2
  %3 = ref_element_addr %0 : $Node<T>, #Node.element // user: %5
  %4 = alloc_stack $T                             // users: %5, %7, %8, %10
  copy_addr %3 to [initialization] %4 : $*T       // id: %5
  %6 = witness_method $T, #CustomStringConvertible.description!getter.1 : $@convention(witness_method) <τ_0_0 where τ_0_0 : CustomStringConvertible> (@in_guaranteed τ_0_0) -> @owned String // user: %7
  %7 = apply %6<T>(%4) : $@convention(witness_method) <τ_0_0 where τ_0_0 : CustomStringConvertible> (@in_guaranteed τ_0_0) -> @owned String // users: %9, %29, %30, %32
  destroy_addr %4 : $*T                           // id: %8
  store %7 to %1 : $*String                       // id: %9
  dealloc_stack %4 : $*T                          // id: %10
  %11 = ref_element_addr %0 : $Node<T>, #Node.left // user: %12
  %12 = load %11 : $*Optional<Node<T>>            // users: %13, %14
  retain_value %12 : $Optional<Node<T>>           // id: %13
  switch_enum %12 : $Optional<Node<T>>, case #Optional.Some!enumelt.1: bb2, default bb1 // id: %14

bb1:                                              // Preds: bb0
  br bb3                                          // id: %15

// %16                                            // users: %17, %21, %33
bb2(%16 : $Node<T>):                              // Preds: bb0
  debug_value %16 : $Node<T>, let, name "left"    // id: %17
  // function_ref static Swift.+ infix (Swift.String, Swift.String) -> Swift.String
  %18 = function_ref @_TZFsoi1pFTSSSS_SS : $@convention(thin) (@owned String, @owned String) -> @owned String // user: %30
  // function_ref static Swift.+ infix (Swift.String, Swift.String) -> Swift.String
  %19 = function_ref @_TZFsoi1pFTSSSS_SS : $@convention(thin) (@owned String, @owned String) -> @owned String // user: %28
  // function_ref Node.Node.description.getter : Swift.String
  %20 = function_ref @_TFC4Node4Nodeg11descriptionSS : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned String // user: %21
  %21 = apply %20<T>(%16) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned String // user: %28
  // function_ref Swift.String.init (_builtinStringLiteral : Builtin.RawPointer, byteSize : Builtin.Word, isASCII : Builtin.Int1) -> Swift.String
  %22 = function_ref @_TFSSCfT21_builtinStringLiteralBp8byteSizeBw7isASCIIBi1__SS : $@convention(thin) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %27
  %23 = metatype $@thin String.Type               // user: %27
  %24 = string_literal utf8 ", "                  // user: %27
  %25 = integer_literal $Builtin.Word, 2          // user: %27
  %26 = integer_literal $Builtin.Int1, -1         // user: %27
  %27 = apply %22(%24, %25, %26, %23) : $@convention(thin) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %28
  %28 = apply %19(%21, %27) : $@convention(thin) (@owned String, @owned String) -> @owned String // user: %30
  retain_value %7 : $String                       // id: %29
  %30 = apply %18(%28, %7) : $@convention(thin) (@owned String, @owned String) -> @owned String // user: %31
  store %30 to %1 : $*String                      // id: %31
  release_value %7 : $String                      // id: %32
  strong_release %16 : $Node<T>                   // id: %33
  br bb3                                          // id: %34

bb3:                                              // Preds: bb1 bb2
  %35 = ref_element_addr %0 : $Node<T>, #Node.right // user: %36
  %36 = load %35 : $*Optional<Node<T>>            // users: %37, %38
  retain_value %36 : $Optional<Node<T>>           // id: %37
  switch_enum %36 : $Optional<Node<T>>, case #Optional.Some!enumelt.1: bb5, default bb4 // id: %38

bb4:                                              // Preds: bb3
  br bb6                                          // id: %39

// %40                                            // users: %41, %54, %59
bb5(%40 : $Node<T>):                              // Preds: bb3
  debug_value %40 : $Node<T>, let, name "right"   // id: %41
  // function_ref static Swift.+ infix (Swift.String, Swift.String) -> Swift.String
  %42 = function_ref @_TZFsoi1pFTSSSS_SS : $@convention(thin) (@owned String, @owned String) -> @owned String // user: %55
  // function_ref static Swift.+ infix (Swift.String, Swift.String) -> Swift.String
  %43 = function_ref @_TZFsoi1pFTSSSS_SS : $@convention(thin) (@owned String, @owned String) -> @owned String // user: %52
  %44 = load %1 : $*String                        // users: %45, %52
  retain_value %44 : $String                      // id: %45
  // function_ref Swift.String.init (_builtinStringLiteral : Builtin.RawPointer, byteSize : Builtin.Word, isASCII : Builtin.Int1) -> Swift.String
  %46 = function_ref @_TFSSCfT21_builtinStringLiteralBp8byteSizeBw7isASCIIBi1__SS : $@convention(thin) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %51
  %47 = metatype $@thin String.Type               // user: %51
  %48 = string_literal utf8 ", "                  // user: %51
  %49 = integer_literal $Builtin.Word, 2          // user: %51
  %50 = integer_literal $Builtin.Int1, -1         // user: %51
  %51 = apply %46(%48, %49, %50, %47) : $@convention(thin) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %52
  %52 = apply %43(%44, %51) : $@convention(thin) (@owned String, @owned String) -> @owned String // user: %55
  // function_ref Node.Node.description.getter : Swift.String
  %53 = function_ref @_TFC4Node4Nodeg11descriptionSS : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned String // user: %54
  %54 = apply %53<T>(%40) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned String // user: %55
  %55 = apply %42(%52, %54) : $@convention(thin) (@owned String, @owned String) -> @owned String // user: %57
  %56 = load %1 : $*String                        // user: %58
  store %55 to %1 : $*String                      // id: %57
  release_value %56 : $String                     // id: %58
  strong_release %40 : $Node<T>                   // id: %59
  br bb6                                          // id: %60

bb6:                                              // Preds: bb4 bb5
  %61 = load %1 : $*String                        // users: %62, %65
  retain_value %61 : $String                      // id: %62
  destroy_addr %1 : $*String                      // id: %63
  dealloc_stack %1 : $*String                     // id: %64
  return %61 : $String                            // id: %65
}

// static Swift.+ infix (Swift.String, Swift.String) -> Swift.String
sil [fragile] [readonly] [_semantics "string.concat"] @_TZFsoi1pFTSSSS_SS : $@convention(thin) (@owned String, @owned String) -> @owned String

// protocol witness for Swift.CustomStringConvertible.description.getter : Swift.String in conformance <A where A: Swift.Comparable, A: Swift.CustomStringConvertible> Node.Node<A> : Swift.CustomStringConvertible in Node
sil [transparent] [thunk] @_TTWuRxs10Comparablexs23CustomStringConvertiblerGC4Node4Nodex_S0_S1_FS0_g11descriptionSS : $@convention(witness_method) <T where T : Comparable, T : CustomStringConvertible> (@in_guaranteed Node<T>) -> @owned String {
// %0                                             // user: %1
bb0(%0 : $*Node<T>):
  %1 = load %0 : $*Node<T>                        // users: %2, %4, %5
  strong_retain %1 : $Node<T>                     // id: %2
  // function_ref Node.Node.description.getter : Swift.String
  %3 = function_ref @_TFC4Node4Nodeg11descriptionSS : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned String // user: %4
  %4 = apply %3<T>(%1) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned String // user: %6
  strong_release %1 : $Node<T>                    // id: %5
  return %4 : $String                             // id: %6
}

// Node.Node.height.getter : Swift.Int
sil hidden @_TFC4Node4Nodeg6heightSi : $@convention(method) <T where T : Comparable, T : CustomStringConvertible> (@guaranteed Node<T>) -> Int {
// %0                                             // users: %1, %2, %36
bb0(%0 : $Node<T>):
  debug_value %0 : $Node<T>, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $Node<T>, #Node.left // users: %5, %7
  %3 = integer_literal $Builtin.Int1, -1          // user: %5
  %4 = integer_literal $Builtin.Int1, 0           // user: %5
  %5 = select_enum_addr %2 : $*Optional<Node<T>>, case #Optional.Some!enumelt.1: %3, default %4 : $Builtin.Int1 // user: %6
  cond_br %5, bb1, bb18                           // id: %6

bb1:                                              // Preds: bb0
  %7 = unchecked_take_enum_data_addr %2 : $*Optional<Node<T>>, #Optional.Some!enumelt.1 // user: %8
  %8 = load %7 : $*Node<T>                        // users: %9, %11, %12
  strong_retain %8 : $Node<T>                     // id: %9
  // function_ref Node.Node.height.getter : Swift.Int
  %10 = function_ref @_TFC4Node4Nodeg6heightSi : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> Int // user: %11
  %11 = apply %10<T>(%8) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> Int // user: %13
  strong_release %8 : $Node<T>                    // id: %12
  %13 = enum $Optional<Int>, #Optional.Some!enumelt.1, %11 : $Int // user: %14
  br bb2(%13 : $Optional<Int>)                    // id: %14

// %15                                            // user: %18
bb2(%15 : $Optional<Int>):                        // Preds: bb1 bb18
  %16 = alloc_stack $Int                          // users: %22, %30, %33, %35
  %17 = alloc_stack $Optional<Int>                // users: %18, %19, %20, %23, %26
  store %15 to %17 : $*Optional<Int>              // id: %18
  switch_enum_addr %17 : $*Optional<Int>, case #Optional.Some!enumelt.1: bb3, case #Optional.None!enumelt: bb5 // id: %19

bb3:                                              // Preds: bb2
  %20 = unchecked_take_enum_data_addr %17 : $*Optional<Int>, #Optional.Some!enumelt.1 // user: %21
  %21 = load %20 : $*Int                          // user: %22
  store %21 to %16 : $*Int                        // id: %22
  dealloc_stack %17 : $*Optional<Int>             // id: %23
  br bb4                                          // id: %24

bb4:                                              // Preds: bb3 bb7
  br bb8                                          // id: %25

bb5:                                              // Preds: bb2
  dealloc_stack %17 : $*Optional<Int>             // id: %26
  %27 = integer_literal $Builtin.Int64, 0         // user: %28
  %28 = struct $Int (%27 : $Builtin.Int64)        // user: %30
  br bb6                                          // id: %29

bb6:                                              // Preds: bb5
  store %28 to %16 : $*Int                        // id: %30
  br bb7                                          // id: %31

bb7:                                              // Preds: bb6
  br bb4                                          // id: %32

bb8:                                              // Preds: bb4
  %33 = load %16 : $*Int                          // users: %34, %72
  debug_value %33 : $Int, let, name "leftHeight"  // id: %34
  dealloc_stack %16 : $*Int                       // id: %35
  %36 = ref_element_addr %0 : $Node<T>, #Node.right // users: %39, %41
  %37 = integer_literal $Builtin.Int1, -1         // user: %39
  %38 = integer_literal $Builtin.Int1, 0          // user: %39
  %39 = select_enum_addr %36 : $*Optional<Node<T>>, case #Optional.Some!enumelt.1: %37, default %38 : $Builtin.Int1 // user: %40
  cond_br %39, bb9, bb17                          // id: %40

bb9:                                              // Preds: bb8
  %41 = unchecked_take_enum_data_addr %36 : $*Optional<Node<T>>, #Optional.Some!enumelt.1 // user: %42
  %42 = load %41 : $*Node<T>                      // users: %43, %45, %46
  strong_retain %42 : $Node<T>                    // id: %43
  // function_ref Node.Node.height.getter : Swift.Int
  %44 = function_ref @_TFC4Node4Nodeg6heightSi : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> Int // user: %45
  %45 = apply %44<T>(%42) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> Int // user: %47
  strong_release %42 : $Node<T>                   // id: %46
  %47 = enum $Optional<Int>, #Optional.Some!enumelt.1, %45 : $Int // user: %48
  br bb10(%47 : $Optional<Int>)                   // id: %48

// %49                                            // user: %52
bb10(%49 : $Optional<Int>):                       // Preds: bb9 bb17
  %50 = alloc_stack $Int                          // users: %56, %64, %67, %69
  %51 = alloc_stack $Optional<Int>                // users: %52, %53, %54, %57, %60
  store %49 to %51 : $*Optional<Int>              // id: %52
  switch_enum_addr %51 : $*Optional<Int>, case #Optional.Some!enumelt.1: bb11, case #Optional.None!enumelt: bb13 // id: %53

bb11:                                             // Preds: bb10
  %54 = unchecked_take_enum_data_addr %51 : $*Optional<Int>, #Optional.Some!enumelt.1 // user: %55
  %55 = load %54 : $*Int                          // user: %56
  store %55 to %50 : $*Int                        // id: %56
  dealloc_stack %51 : $*Optional<Int>             // id: %57
  br bb12                                         // id: %58

bb12:                                             // Preds: bb11 bb15
  br bb16                                         // id: %59

bb13:                                             // Preds: bb10
  dealloc_stack %51 : $*Optional<Int>             // id: %60
  %61 = integer_literal $Builtin.Int64, 0         // user: %62
  %62 = struct $Int (%61 : $Builtin.Int64)        // user: %64
  br bb14                                         // id: %63

bb14:                                             // Preds: bb13
  store %62 to %50 : $*Int                        // id: %64
  br bb15                                         // id: %65

bb15:                                             // Preds: bb14
  br bb12                                         // id: %66

bb16:                                             // Preds: bb12
  %67 = load %50 : $*Int                          // users: %68, %74
  debug_value %67 : $Int, let, name "rightHeight" // id: %68
  dealloc_stack %50 : $*Int                       // id: %69
  // function_ref Swift.max <A where A: Swift.Comparable> (A, A) -> A
  %70 = function_ref @_TFs3maxuRxs10ComparablerFTxx_x : $@convention(thin) <τ_0_0 where τ_0_0 : Comparable> (@out τ_0_0, @in τ_0_0, @in τ_0_0) -> () // user: %76
  %71 = alloc_stack $Int                          // users: %72, %76, %88
  store %33 to %71 : $*Int                        // id: %72
  %73 = alloc_stack $Int                          // users: %74, %76, %87
  store %67 to %73 : $*Int                        // id: %74
  %75 = alloc_stack $Int                          // users: %76, %77, %86
  %76 = apply %70<Int>(%75, %71, %73) : $@convention(thin) <τ_0_0 where τ_0_0 : Comparable> (@out τ_0_0, @in τ_0_0, @in τ_0_0) -> ()
  %77 = load %75 : $*Int                          // user: %79
  %78 = integer_literal $Builtin.Int64, 1         // user: %81
  %79 = struct_extract %77 : $Int, #Int._value    // user: %81
  %80 = integer_literal $Builtin.Int1, -1         // user: %81
  %81 = builtin "sadd_with_overflow_Int64"(%79 : $Builtin.Int64, %78 : $Builtin.Int64, %80 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %82, %83
  %82 = tuple_extract %81 : $(Builtin.Int64, Builtin.Int1), 0 // user: %85
  %83 = tuple_extract %81 : $(Builtin.Int64, Builtin.Int1), 1 // user: %84
  cond_fail %83 : $Builtin.Int1                   // id: %84
  %85 = struct $Int (%82 : $Builtin.Int64)        // user: %89
  dealloc_stack %75 : $*Int                       // id: %86
  dealloc_stack %73 : $*Int                       // id: %87
  dealloc_stack %71 : $*Int                       // id: %88
  return %85 : $Int                               // id: %89

bb17:                                             // Preds: bb8
  %90 = enum $Optional<Int>, #Optional.None!enumelt // user: %91
  br bb10(%90 : $Optional<Int>)                   // id: %91

bb18:                                             // Preds: bb0
  %92 = enum $Optional<Int>, #Optional.None!enumelt // user: %93
  br bb2(%92 : $Optional<Int>)                    // id: %93
}

// static Swift.?? infix <A> (Swift.Optional<A>, @autoclosure () throws -> A) throws -> A
sil [transparent] [fragile] @_TZFsoi2qqurFzTGSqx_KzT_x_x : $@convention(thin) <T> (@out T, @in Optional<T>, @owned @callee_owned (@out T) -> @error ErrorType) -> @error ErrorType

// Swift.Int.init (_builtinIntegerLiteral : Builtin.Int2048) -> Swift.Int
sil [transparent] [fragile] @_TFSiCfT22_builtinIntegerLiteralBi2048__Si : $@convention(thin) (Builtin.Int2048, @thin Int.Type) -> Int

// static Swift.+ infix (Swift.Int, Swift.Int) -> Swift.Int
sil [transparent] [fragile] @_TZFsoi1pFTSiSi_Si : $@convention(thin) (Int, Int) -> Int

// Swift.max <A where A: Swift.Comparable> (A, A) -> A
sil [fragile] @_TFs3maxuRxs10ComparablerFTxx_x : $@convention(thin) <T where T : Comparable> (@out T, @in T, @in T) -> ()

// Node.Node.balanceFactor.getter : Swift.Int
sil hidden @_TFC4Node4Nodeg13balanceFactorSi : $@convention(method) <T where T : Comparable, T : CustomStringConvertible> (@guaranteed Node<T>) -> Int {
// %0                                             // users: %1, %2, %36
bb0(%0 : $Node<T>):
  debug_value %0 : $Node<T>, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $Node<T>, #Node.left // users: %5, %7
  %3 = integer_literal $Builtin.Int1, -1          // user: %5
  %4 = integer_literal $Builtin.Int1, 0           // user: %5
  %5 = select_enum_addr %2 : $*Optional<Node<T>>, case #Optional.Some!enumelt.1: %3, default %4 : $Builtin.Int1 // user: %6
  cond_br %5, bb1, bb18                           // id: %6

bb1:                                              // Preds: bb0
  %7 = unchecked_take_enum_data_addr %2 : $*Optional<Node<T>>, #Optional.Some!enumelt.1 // user: %8
  %8 = load %7 : $*Node<T>                        // users: %9, %11, %12
  strong_retain %8 : $Node<T>                     // id: %9
  // function_ref Node.Node.height.getter : Swift.Int
  %10 = function_ref @_TFC4Node4Nodeg6heightSi : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> Int // user: %11
  %11 = apply %10<T>(%8) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> Int // user: %13
  strong_release %8 : $Node<T>                    // id: %12
  %13 = enum $Optional<Int>, #Optional.Some!enumelt.1, %11 : $Int // user: %14
  br bb2(%13 : $Optional<Int>)                    // id: %14

// %15                                            // user: %18
bb2(%15 : $Optional<Int>):                        // Preds: bb1 bb18
  %16 = alloc_stack $Int                          // users: %22, %30, %33, %35
  %17 = alloc_stack $Optional<Int>                // users: %18, %19, %20, %23, %26
  store %15 to %17 : $*Optional<Int>              // id: %18
  switch_enum_addr %17 : $*Optional<Int>, case #Optional.Some!enumelt.1: bb3, case #Optional.None!enumelt: bb5 // id: %19

bb3:                                              // Preds: bb2
  %20 = unchecked_take_enum_data_addr %17 : $*Optional<Int>, #Optional.Some!enumelt.1 // user: %21
  %21 = load %20 : $*Int                          // user: %22
  store %21 to %16 : $*Int                        // id: %22
  dealloc_stack %17 : $*Optional<Int>             // id: %23
  br bb4                                          // id: %24

bb4:                                              // Preds: bb3 bb7
  br bb8                                          // id: %25

bb5:                                              // Preds: bb2
  dealloc_stack %17 : $*Optional<Int>             // id: %26
  %27 = integer_literal $Builtin.Int64, 0         // user: %28
  %28 = struct $Int (%27 : $Builtin.Int64)        // user: %30
  br bb6                                          // id: %29

bb6:                                              // Preds: bb5
  store %28 to %16 : $*Int                        // id: %30
  br bb7                                          // id: %31

bb7:                                              // Preds: bb6
  br bb4                                          // id: %32

bb8:                                              // Preds: bb4
  %33 = load %16 : $*Int                          // users: %34, %73
  debug_value %33 : $Int, let, name "leftHeight"  // id: %34
  dealloc_stack %16 : $*Int                       // id: %35
  %36 = ref_element_addr %0 : $Node<T>, #Node.right // users: %39, %41
  %37 = integer_literal $Builtin.Int1, -1         // user: %39
  %38 = integer_literal $Builtin.Int1, 0          // user: %39
  %39 = select_enum_addr %36 : $*Optional<Node<T>>, case #Optional.Some!enumelt.1: %37, default %38 : $Builtin.Int1 // user: %40
  cond_br %39, bb9, bb17                          // id: %40

bb9:                                              // Preds: bb8
  %41 = unchecked_take_enum_data_addr %36 : $*Optional<Node<T>>, #Optional.Some!enumelt.1 // user: %42
  %42 = load %41 : $*Node<T>                      // users: %43, %45, %46
  strong_retain %42 : $Node<T>                    // id: %43
  // function_ref Node.Node.height.getter : Swift.Int
  %44 = function_ref @_TFC4Node4Nodeg6heightSi : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> Int // user: %45
  %45 = apply %44<T>(%42) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> Int // user: %47
  strong_release %42 : $Node<T>                   // id: %46
  %47 = enum $Optional<Int>, #Optional.Some!enumelt.1, %45 : $Int // user: %48
  br bb10(%47 : $Optional<Int>)                   // id: %48

// %49                                            // user: %52
bb10(%49 : $Optional<Int>):                       // Preds: bb9 bb17
  %50 = alloc_stack $Int                          // users: %56, %64, %67, %69
  %51 = alloc_stack $Optional<Int>                // users: %52, %53, %54, %57, %60
  store %49 to %51 : $*Optional<Int>              // id: %52
  switch_enum_addr %51 : $*Optional<Int>, case #Optional.Some!enumelt.1: bb11, case #Optional.None!enumelt: bb13 // id: %53

bb11:                                             // Preds: bb10
  %54 = unchecked_take_enum_data_addr %51 : $*Optional<Int>, #Optional.Some!enumelt.1 // user: %55
  %55 = load %54 : $*Int                          // user: %56
  store %55 to %50 : $*Int                        // id: %56
  dealloc_stack %51 : $*Optional<Int>             // id: %57
  br bb12                                         // id: %58

bb12:                                             // Preds: bb11 bb15
  br bb16                                         // id: %59

bb13:                                             // Preds: bb10
  dealloc_stack %51 : $*Optional<Int>             // id: %60
  %61 = integer_literal $Builtin.Int64, 0         // user: %62
  %62 = struct $Int (%61 : $Builtin.Int64)        // user: %64
  br bb14                                         // id: %63

bb14:                                             // Preds: bb13
  store %62 to %50 : $*Int                        // id: %64
  br bb15                                         // id: %65

bb15:                                             // Preds: bb14
  br bb12                                         // id: %66

bb16:                                             // Preds: bb12
  %67 = load %50 : $*Int                          // users: %68, %83
  debug_value %67 : $Int, let, name "rightHeight" // id: %68
  dealloc_stack %50 : $*Int                       // id: %69
  %70 = integer_literal $Builtin.Int64, 0         // user: %75
  %71 = tuple ()
  %72 = tuple ()
  %73 = struct_extract %33 : $Int, #Int._value    // user: %75
  %74 = integer_literal $Builtin.Int1, -1         // user: %75
  %75 = builtin "ssub_with_overflow_Int64"(%70 : $Builtin.Int64, %73 : $Builtin.Int64, %74 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %76, %77
  %76 = tuple_extract %75 : $(Builtin.Int64, Builtin.Int1), 0 // user: %79
  %77 = tuple_extract %75 : $(Builtin.Int64, Builtin.Int1), 1 // user: %78
  cond_fail %77 : $Builtin.Int1                   // id: %78
  %79 = struct $Int (%76 : $Builtin.Int64)        // user: %82
  %80 = tuple ()
  %81 = tuple ()
  %82 = struct_extract %79 : $Int, #Int._value    // user: %85
  %83 = struct_extract %67 : $Int, #Int._value    // user: %85
  %84 = integer_literal $Builtin.Int1, -1         // user: %85
  %85 = builtin "sadd_with_overflow_Int64"(%82 : $Builtin.Int64, %83 : $Builtin.Int64, %84 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %86, %87
  %86 = tuple_extract %85 : $(Builtin.Int64, Builtin.Int1), 0 // user: %89
  %87 = tuple_extract %85 : $(Builtin.Int64, Builtin.Int1), 1 // user: %88
  cond_fail %87 : $Builtin.Int1                   // id: %88
  %89 = struct $Int (%86 : $Builtin.Int64)        // user: %90
  return %89 : $Int                               // id: %90

bb17:                                             // Preds: bb8
  %91 = enum $Optional<Int>, #Optional.None!enumelt // user: %92
  br bb10(%91 : $Optional<Int>)                   // id: %92

bb18:                                             // Preds: bb0
  %93 = enum $Optional<Int>, #Optional.None!enumelt // user: %94
  br bb2(%93 : $Optional<Int>)                    // id: %94
}

// static Swift.- prefix <A where A: Swift.SignedNumberType> (A) -> A
sil [transparent] [fragile] @_TZFsop1suRxs16SignedNumberTyperFxx : $@convention(thin) <T where T : SignedNumberType, T.IntegerLiteralType : _BuiltinIntegerLiteralConvertible> (@out T, @in T) -> ()

// Node.Node.isBalanced.getter : Swift.Bool
sil hidden @_TFC4Node4Nodeg10isBalancedSb : $@convention(method) <T where T : Comparable, T : CustomStringConvertible> (@guaranteed Node<T>) -> Bool {
// %0                                             // users: %1, %3
bb0(%0 : $Node<T>):
  debug_value %0 : $Node<T>, let, name "self", argno 1 // id: %1
  // function_ref Node.Node.balanceFactor.getter : Swift.Int
  %2 = function_ref @_TFC4Node4Nodeg13balanceFactorSi : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> Int // user: %3
  %3 = apply %2<T>(%0) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> Int // user: %4
  %4 = struct_extract %3 : $Int, #Int._value      // users: %6, %9, %17
  %5 = integer_literal $Builtin.Int64, 0          // users: %6, %9
  %6 = builtin "cmp_slt_Int64"(%4 : $Builtin.Int64, %5 : $Builtin.Int64) : $Builtin.Int1 // user: %7
  cond_br %6, bb1, bb3                            // id: %7

bb1:                                              // Preds: bb0
  %8 = integer_literal $Builtin.Int1, -1          // user: %9
  %9 = builtin "ssub_with_overflow_Int64"(%5 : $Builtin.Int64, %4 : $Builtin.Int64, %8 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %10, %11
  %10 = tuple_extract %9 : $(Builtin.Int64, Builtin.Int1), 0 // user: %13
  %11 = tuple_extract %9 : $(Builtin.Int64, Builtin.Int1), 1 // user: %12
  cond_fail %11 : $Builtin.Int1                   // id: %12
  br bb2(%10 : $Builtin.Int64)                    // id: %13

// %14                                            // user: %15
bb2(%14 : $Builtin.Int64):                        // Preds: bb1 bb3
  %15 = struct $Int (%14 : $Builtin.Int64)        // user: %20
  br bb4                                          // id: %16

bb3:                                              // Preds: bb0
  br bb2(%4 : $Builtin.Int64)                     // id: %17

bb4:                                              // Preds: bb2
  %18 = tuple ()
  %19 = integer_literal $Builtin.Int64, 1         // user: %21
  %20 = struct_extract %15 : $Int, #Int._value    // user: %21
  %21 = builtin "cmp_sle_Int64"(%20 : $Builtin.Int64, %19 : $Builtin.Int64) : $Builtin.Int1 // user: %22
  %22 = struct $Bool (%21 : $Builtin.Int1)        // user: %23
  return %22 : $Bool                              // id: %23
}

// static Swift.<= infix (Swift.Int, Swift.Int) -> Swift.Bool
sil [transparent] [fragile] @_TZFsoi2leFTSiSi_Sb : $@convention(thin) (Int, Int) -> Bool

// Swift.abs <A where A: Swift.SignedNumberType> (A) -> A
sil [transparent] [fragile] @_TFs3absuRxs16SignedNumberTyperFxx : $@convention(thin) <T where T : SignedNumberType, T.IntegerLiteralType : _BuiltinIntegerLiteralConvertible> (@out T, @in T) -> ()

// Node.Node.rotateLeft () -> Node.Node<A>
sil hidden @_TFC4Node4Node10rotateLeftfT_GS0_x_ : $@convention(method) <T where T : Comparable, T : CustomStringConvertible> (@guaranteed Node<T>) -> @owned Node<T> {
// %0                                             // users: %1, %2, %9, %11, %12
bb0(%0 : $Node<T>):
  debug_value %0 : $Node<T>, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $Node<T>, #Node.right // user: %3
  %3 = load %2 : $*Optional<Node<T>>              // users: %4, %5
  retain_value %3 : $Optional<Node<T>>            // id: %4
  switch_enum %3 : $Optional<Node<T>>, case #Optional.Some!enumelt.1: bb1, default bb2 // id: %5

// %6                                             // users: %7, %8, %13, %17
bb1(%6 : $Node<T>):                               // Preds: bb0
  debug_value %6 : $Node<T>, let, name "newRoot"  // id: %7
  %8 = ref_element_addr %6 : $Node<T>, #Node.left // user: %10
  %9 = ref_element_addr %0 : $Node<T>, #Node.right // user: %10
  copy_addr %8 to %9 : $*Optional<Node<T>>        // id: %10
  strong_retain %0 : $Node<T>                     // id: %11
  %12 = enum $Optional<Node<T>>, #Optional.Some!enumelt.1, %0 : $Node<T> // user: %15
  %13 = ref_element_addr %6 : $Node<T>, #Node.left // users: %14, %15
  %14 = load %13 : $*Optional<Node<T>>            // user: %16
  store %12 to %13 : $*Optional<Node<T>>          // id: %15
  release_value %14 : $Optional<Node<T>>          // id: %16
  return %6 : $Node<T>                            // id: %17

bb2:                                              // Preds: bb0
  %18 = string_literal utf8 "Node.swift"          // user: %23
  %19 = integer_literal $Builtin.Word, 10         // user: %23
  br bb3                                          // id: %20

bb3:                                              // Preds: bb2
  %21 = integer_literal $Builtin.Int8, 2          // user: %23
  br bb4                                          // id: %22

bb4:                                              // Preds: bb3
  %23 = struct $StaticString (%18 : $Builtin.RawPointer, %19 : $Builtin.Word, %21 : $Builtin.Int8) // users: %43, %44, %45
  br bb5                                          // id: %24

bb5:                                              // Preds: bb4
  %25 = integer_literal $Builtin.Int64, 104       // user: %26
  %26 = struct $UInt (%25 : $Builtin.Int64)       // user: %46
  %27 = string_literal utf8 "fatal error"         // user: %46
  %28 = integer_literal $Builtin.Word, 11         // user: %46
  %29 = integer_literal $Builtin.Int8, 2          // user: %46
  // function_ref Swift.String.init (_builtinStringLiteral : Builtin.RawPointer, byteSize : Builtin.Word, isASCII : Builtin.Int1) -> Swift.String
  %30 = function_ref @_TFSSCfT21_builtinStringLiteralBp8byteSizeBw7isASCIIBi1__SS : $@convention(thin) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %35
  %31 = metatype $@thin String.Type               // user: %35
  %32 = string_literal utf8 "Can't have a left rotation with nil right" // user: %35
  %33 = integer_literal $Builtin.Word, 41         // user: %35
  %34 = integer_literal $Builtin.Int1, -1         // user: %35
  %35 = apply %30(%32, %33, %34, %31) : $@convention(thin) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %37
  // function_ref function signature specialization <Arg[0] = Exploded, Arg[1] = Exploded, Arg[2] = Exploded> of Swift._assertionFailed (Swift.StaticString, Swift.String, Swift.StaticString, Swift.UInt) -> ()
  %36 = function_ref @_TTSf4s_s_s_n___TFs16_assertionFailedFTVs12StaticStringSSS_Su_T_ : $@convention(thin) @noreturn (Builtin.RawPointer, Builtin.Word, Builtin.Int8, Builtin.RawPointer, Builtin.Int64, @owned Optional<AnyObject>, Builtin.RawPointer, Builtin.Word, Builtin.Int8, UInt) -> () // user: %46
  %37 = struct_extract %35 : $String, #String._core // users: %38, %39, %40
  %38 = struct_extract %37 : $_StringCore, #_StringCore._owner // user: %46
  %39 = struct_extract %37 : $_StringCore, #_StringCore._countAndFlags // user: %42
  %40 = struct_extract %37 : $_StringCore, #_StringCore._baseAddress // user: %41
  %41 = struct_extract %40 : $COpaquePointer, #COpaquePointer._rawValue // user: %46
  %42 = struct_extract %39 : $UInt, #UInt._value  // user: %46
  %43 = struct_extract %23 : $StaticString, #StaticString._flags // user: %46
  %44 = struct_extract %23 : $StaticString, #StaticString._byteSize // user: %46
  %45 = struct_extract %23 : $StaticString, #StaticString._startPtrOrData // user: %46
  %46 = apply %36(%27, %28, %29, %41, %42, %38, %45, %44, %43, %26) : $@convention(thin) @noreturn (Builtin.RawPointer, Builtin.Word, Builtin.Int8, Builtin.RawPointer, Builtin.Int64, @owned Optional<AnyObject>, Builtin.RawPointer, Builtin.Word, Builtin.Int8, UInt) -> ()
  unreachable                                     // id: %47
}

// Swift.fatalError (@autoclosure () -> Swift.String, file : Swift.StaticString, line : Swift.UInt) -> ()
sil [transparent] [fragile] @_TFs10fatalErrorFTKT_SS4fileVs12StaticString4lineSu_T_ : $@convention(thin) @noreturn (@owned @callee_owned () -> @owned String, StaticString, UInt) -> ()

// Swift.StaticString.init (_builtinStringLiteral : Builtin.RawPointer, byteSize : Builtin.Word, isASCII : Builtin.Int1) -> Swift.StaticString
sil [transparent] [fragile] [readonly] @_TFVs12StaticStringCfT21_builtinStringLiteralBp8byteSizeBw7isASCIIBi1__S_ : $@convention(thin) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin StaticString.Type) -> StaticString

// Swift.UInt.init (_builtinIntegerLiteral : Builtin.Int2048) -> Swift.UInt
sil [transparent] [fragile] @_TFSuCfT22_builtinIntegerLiteralBi2048__Su : $@convention(thin) (Builtin.Int2048, @thin UInt.Type) -> UInt

// Node.Node.rotateRight () -> Node.Node<A>
sil hidden @_TFC4Node4Node11rotateRightfT_GS0_x_ : $@convention(method) <T where T : Comparable, T : CustomStringConvertible> (@guaranteed Node<T>) -> @owned Node<T> {
// %0                                             // users: %1, %2, %9, %11, %12
bb0(%0 : $Node<T>):
  debug_value %0 : $Node<T>, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $Node<T>, #Node.left // user: %3
  %3 = load %2 : $*Optional<Node<T>>              // users: %4, %5
  retain_value %3 : $Optional<Node<T>>            // id: %4
  switch_enum %3 : $Optional<Node<T>>, case #Optional.Some!enumelt.1: bb1, default bb2 // id: %5

// %6                                             // users: %7, %8, %13, %17
bb1(%6 : $Node<T>):                               // Preds: bb0
  debug_value %6 : $Node<T>, let, name "newRoot"  // id: %7
  %8 = ref_element_addr %6 : $Node<T>, #Node.right // user: %10
  %9 = ref_element_addr %0 : $Node<T>, #Node.left // user: %10
  copy_addr %8 to %9 : $*Optional<Node<T>>        // id: %10
  strong_retain %0 : $Node<T>                     // id: %11
  %12 = enum $Optional<Node<T>>, #Optional.Some!enumelt.1, %0 : $Node<T> // user: %15
  %13 = ref_element_addr %6 : $Node<T>, #Node.right // users: %14, %15
  %14 = load %13 : $*Optional<Node<T>>            // user: %16
  store %12 to %13 : $*Optional<Node<T>>          // id: %15
  release_value %14 : $Optional<Node<T>>          // id: %16
  return %6 : $Node<T>                            // id: %17

bb2:                                              // Preds: bb0
  %18 = string_literal utf8 "Node.swift"          // user: %23
  %19 = integer_literal $Builtin.Word, 10         // user: %23
  br bb3                                          // id: %20

bb3:                                              // Preds: bb2
  %21 = integer_literal $Builtin.Int8, 2          // user: %23
  br bb4                                          // id: %22

bb4:                                              // Preds: bb3
  %23 = struct $StaticString (%18 : $Builtin.RawPointer, %19 : $Builtin.Word, %21 : $Builtin.Int8) // users: %43, %44, %45
  br bb5                                          // id: %24

bb5:                                              // Preds: bb4
  %25 = integer_literal $Builtin.Int64, 111       // user: %26
  %26 = struct $UInt (%25 : $Builtin.Int64)       // user: %46
  %27 = string_literal utf8 "fatal error"         // user: %46
  %28 = integer_literal $Builtin.Word, 11         // user: %46
  %29 = integer_literal $Builtin.Int8, 2          // user: %46
  // function_ref Swift.String.init (_builtinStringLiteral : Builtin.RawPointer, byteSize : Builtin.Word, isASCII : Builtin.Int1) -> Swift.String
  %30 = function_ref @_TFSSCfT21_builtinStringLiteralBp8byteSizeBw7isASCIIBi1__SS : $@convention(thin) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %35
  %31 = metatype $@thin String.Type               // user: %35
  %32 = string_literal utf8 "Can't have a right rotation with nil left" // user: %35
  %33 = integer_literal $Builtin.Word, 41         // user: %35
  %34 = integer_literal $Builtin.Int1, -1         // user: %35
  %35 = apply %30(%32, %33, %34, %31) : $@convention(thin) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %37
  // function_ref function signature specialization <Arg[0] = Exploded, Arg[1] = Exploded, Arg[2] = Exploded> of Swift._assertionFailed (Swift.StaticString, Swift.String, Swift.StaticString, Swift.UInt) -> ()
  %36 = function_ref @_TTSf4s_s_s_n___TFs16_assertionFailedFTVs12StaticStringSSS_Su_T_ : $@convention(thin) @noreturn (Builtin.RawPointer, Builtin.Word, Builtin.Int8, Builtin.RawPointer, Builtin.Int64, @owned Optional<AnyObject>, Builtin.RawPointer, Builtin.Word, Builtin.Int8, UInt) -> () // user: %46
  %37 = struct_extract %35 : $String, #String._core // users: %38, %39, %40
  %38 = struct_extract %37 : $_StringCore, #_StringCore._owner // user: %46
  %39 = struct_extract %37 : $_StringCore, #_StringCore._countAndFlags // user: %42
  %40 = struct_extract %37 : $_StringCore, #_StringCore._baseAddress // user: %41
  %41 = struct_extract %40 : $COpaquePointer, #COpaquePointer._rawValue // user: %46
  %42 = struct_extract %39 : $UInt, #UInt._value  // user: %46
  %43 = struct_extract %23 : $StaticString, #StaticString._flags // user: %46
  %44 = struct_extract %23 : $StaticString, #StaticString._byteSize // user: %46
  %45 = struct_extract %23 : $StaticString, #StaticString._startPtrOrData // user: %46
  %46 = apply %36(%27, %28, %29, %41, %42, %38, %45, %44, %43, %26) : $@convention(thin) @noreturn (Builtin.RawPointer, Builtin.Word, Builtin.Int8, Builtin.RawPointer, Builtin.Int64, @owned Optional<AnyObject>, Builtin.RawPointer, Builtin.Word, Builtin.Int8, UInt) -> ()
  unreachable                                     // id: %47
}

// Node.Node.rotateLeftRight () -> Node.Node<A>
sil hidden @_TFC4Node4Node15rotateLeftRightfT_GS0_x_ : $@convention(method) <T where T : Comparable, T : CustomStringConvertible> (@guaranteed Node<T>) -> @owned Node<T> {
// %0                                             // users: %1, %2, %27, %29, %30
bb0(%0 : $Node<T>):
  debug_value %0 : $Node<T>, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $Node<T>, #Node.left // user: %3
  %3 = load %2 : $*Optional<Node<T>>              // users: %4, %5
  retain_value %3 : $Optional<Node<T>>            // id: %4
  switch_enum %3 : $Optional<Node<T>>, case #Optional.Some!enumelt.1: bb2, default bb1 // id: %5

bb1:                                              // Preds: bb0
  br bb5                                          // id: %6

// %7                                             // users: %8, %9, %13, %18, %20, %21, %35
bb2(%7 : $Node<T>):                               // Preds: bb0
  debug_value %7 : $Node<T>, let, name "left"     // id: %8
  %9 = ref_element_addr %7 : $Node<T>, #Node.right // user: %10
  %10 = load %9 : $*Optional<Node<T>>             // users: %11, %12
  retain_value %10 : $Optional<Node<T>>           // id: %11
  switch_enum %10 : $Optional<Node<T>>, case #Optional.Some!enumelt.1: bb4, default bb3 // id: %12

bb3:                                              // Preds: bb2
  strong_release %7 : $Node<T>                    // id: %13
  br bb5                                          // id: %14

// %15                                            // users: %16, %17, %22, %26, %31, %36
bb4(%15 : $Node<T>):                              // Preds: bb2
  debug_value %15 : $Node<T>, let, name "newRoot" // id: %16
  %17 = ref_element_addr %15 : $Node<T>, #Node.left // user: %19
  %18 = ref_element_addr %7 : $Node<T>, #Node.right // user: %19
  copy_addr %17 to %18 : $*Optional<Node<T>>      // id: %19
  strong_retain %7 : $Node<T>                     // id: %20
  %21 = enum $Optional<Node<T>>, #Optional.Some!enumelt.1, %7 : $Node<T> // user: %24
  %22 = ref_element_addr %15 : $Node<T>, #Node.left // users: %23, %24
  %23 = load %22 : $*Optional<Node<T>>            // user: %25
  store %21 to %22 : $*Optional<Node<T>>          // id: %24
  release_value %23 : $Optional<Node<T>>          // id: %25
  %26 = ref_element_addr %15 : $Node<T>, #Node.right // user: %28
  %27 = ref_element_addr %0 : $Node<T>, #Node.left // user: %28
  copy_addr %26 to %27 : $*Optional<Node<T>>      // id: %28
  strong_retain %0 : $Node<T>                     // id: %29
  %30 = enum $Optional<Node<T>>, #Optional.Some!enumelt.1, %0 : $Node<T> // user: %33
  %31 = ref_element_addr %15 : $Node<T>, #Node.left // users: %32, %33
  %32 = load %31 : $*Optional<Node<T>>            // user: %34
  store %30 to %31 : $*Optional<Node<T>>          // id: %33
  release_value %32 : $Optional<Node<T>>          // id: %34
  strong_release %7 : $Node<T>                    // id: %35
  return %15 : $Node<T>                           // id: %36

bb5:                                              // Preds: bb1 bb3
  %37 = string_literal utf8 "Node.swift"          // user: %42
  %38 = integer_literal $Builtin.Word, 10         // user: %42
  br bb6                                          // id: %39

bb6:                                              // Preds: bb5
  %40 = integer_literal $Builtin.Int8, 2          // user: %42
  br bb7                                          // id: %41

bb7:                                              // Preds: bb6
  %42 = struct $StaticString (%37 : $Builtin.RawPointer, %38 : $Builtin.Word, %40 : $Builtin.Int8) // users: %54, %55, %56
  br bb8                                          // id: %43

bb8:                                              // Preds: bb7
  %44 = integer_literal $Builtin.Int64, 118       // user: %45
  %45 = struct $UInt (%44 : $Builtin.Int64)       // user: %57
  %46 = string_literal utf8 "fatal error"         // user: %57
  %47 = integer_literal $Builtin.Word, 11         // user: %57
  %48 = integer_literal $Builtin.Int8, 2          // user: %57
  %49 = enum $Optional<AnyObject>, #Optional.None!enumelt // user: %57
  %50 = global_addr @_Tvs19_emptyStringStorageVs6UInt32 : $*UInt32 // user: %51
  %51 = address_to_pointer %50 : $*UInt32 to $Builtin.RawPointer // user: %57
  %52 = integer_literal $Builtin.Int64, 0         // user: %57
  // function_ref function signature specialization <Arg[0] = Exploded, Arg[1] = Exploded, Arg[2] = Exploded> of Swift._assertionFailed (Swift.StaticString, Swift.String, Swift.StaticString, Swift.UInt) -> ()
  %53 = function_ref @_TTSf4s_s_s_n___TFs16_assertionFailedFTVs12StaticStringSSS_Su_T_ : $@convention(thin) @noreturn (Builtin.RawPointer, Builtin.Word, Builtin.Int8, Builtin.RawPointer, Builtin.Int64, @owned Optional<AnyObject>, Builtin.RawPointer, Builtin.Word, Builtin.Int8, UInt) -> () // user: %57
  %54 = struct_extract %42 : $StaticString, #StaticString._flags // user: %57
  %55 = struct_extract %42 : $StaticString, #StaticString._byteSize // user: %57
  %56 = struct_extract %42 : $StaticString, #StaticString._startPtrOrData // user: %57
  %57 = apply %53(%46, %47, %48, %51, %52, %49, %56, %55, %54, %45) : $@convention(thin) @noreturn (Builtin.RawPointer, Builtin.Word, Builtin.Int8, Builtin.RawPointer, Builtin.Int64, @owned Optional<AnyObject>, Builtin.RawPointer, Builtin.Word, Builtin.Int8, UInt) -> ()
  unreachable                                     // id: %58
}

// Swift.(fatalError (@autoclosure () -> Swift.String, file : Swift.StaticString, line : Swift.UInt) -> ()).(default argument 0)
sil [transparent] [fragile] @_TIFs10fatalErrorFTKT_SS4fileVs12StaticString4lineSu_T_A_ : $@convention(thin) () -> @owned @callee_owned () -> @owned String

// Node.Node.rotateRightLeft () -> Node.Node<A>
sil hidden @_TFC4Node4Node15rotateRightLeftfT_GS0_x_ : $@convention(method) <T where T : Comparable, T : CustomStringConvertible> (@guaranteed Node<T>) -> @owned Node<T> {
// %0                                             // users: %1, %2, %27, %29, %30
bb0(%0 : $Node<T>):
  debug_value %0 : $Node<T>, let, name "self", argno 1 // id: %1
  %2 = ref_element_addr %0 : $Node<T>, #Node.right // user: %3
  %3 = load %2 : $*Optional<Node<T>>              // users: %4, %5
  retain_value %3 : $Optional<Node<T>>            // id: %4
  switch_enum %3 : $Optional<Node<T>>, case #Optional.Some!enumelt.1: bb2, default bb1 // id: %5

bb1:                                              // Preds: bb0
  br bb5                                          // id: %6

// %7                                             // users: %8, %9, %13, %18, %20, %21, %35
bb2(%7 : $Node<T>):                               // Preds: bb0
  debug_value %7 : $Node<T>, let, name "right"    // id: %8
  %9 = ref_element_addr %7 : $Node<T>, #Node.left // user: %10
  %10 = load %9 : $*Optional<Node<T>>             // users: %11, %12
  retain_value %10 : $Optional<Node<T>>           // id: %11
  switch_enum %10 : $Optional<Node<T>>, case #Optional.Some!enumelt.1: bb4, default bb3 // id: %12

bb3:                                              // Preds: bb2
  strong_release %7 : $Node<T>                    // id: %13
  br bb5                                          // id: %14

// %15                                            // users: %16, %17, %22, %26, %31, %36
bb4(%15 : $Node<T>):                              // Preds: bb2
  debug_value %15 : $Node<T>, let, name "newRoot" // id: %16
  %17 = ref_element_addr %15 : $Node<T>, #Node.right // user: %19
  %18 = ref_element_addr %7 : $Node<T>, #Node.left // user: %19
  copy_addr %17 to %18 : $*Optional<Node<T>>      // id: %19
  strong_retain %7 : $Node<T>                     // id: %20
  %21 = enum $Optional<Node<T>>, #Optional.Some!enumelt.1, %7 : $Node<T> // user: %24
  %22 = ref_element_addr %15 : $Node<T>, #Node.right // users: %23, %24
  %23 = load %22 : $*Optional<Node<T>>            // user: %25
  store %21 to %22 : $*Optional<Node<T>>          // id: %24
  release_value %23 : $Optional<Node<T>>          // id: %25
  %26 = ref_element_addr %15 : $Node<T>, #Node.left // user: %28
  %27 = ref_element_addr %0 : $Node<T>, #Node.right // user: %28
  copy_addr %26 to %27 : $*Optional<Node<T>>      // id: %28
  strong_retain %0 : $Node<T>                     // id: %29
  %30 = enum $Optional<Node<T>>, #Optional.Some!enumelt.1, %0 : $Node<T> // user: %33
  %31 = ref_element_addr %15 : $Node<T>, #Node.left // users: %32, %33
  %32 = load %31 : $*Optional<Node<T>>            // user: %34
  store %30 to %31 : $*Optional<Node<T>>          // id: %33
  release_value %32 : $Optional<Node<T>>          // id: %34
  strong_release %7 : $Node<T>                    // id: %35
  return %15 : $Node<T>                           // id: %36

bb5:                                              // Preds: bb1 bb3
  %37 = string_literal utf8 "Node.swift"          // user: %42
  %38 = integer_literal $Builtin.Word, 10         // user: %42
  br bb6                                          // id: %39

bb6:                                              // Preds: bb5
  %40 = integer_literal $Builtin.Int8, 2          // user: %42
  br bb7                                          // id: %41

bb7:                                              // Preds: bb6
  %42 = struct $StaticString (%37 : $Builtin.RawPointer, %38 : $Builtin.Word, %40 : $Builtin.Int8) // users: %54, %55, %56
  br bb8                                          // id: %43

bb8:                                              // Preds: bb7
  %44 = integer_literal $Builtin.Int64, 127       // user: %45
  %45 = struct $UInt (%44 : $Builtin.Int64)       // user: %57
  %46 = string_literal utf8 "fatal error"         // user: %57
  %47 = integer_literal $Builtin.Word, 11         // user: %57
  %48 = integer_literal $Builtin.Int8, 2          // user: %57
  %49 = enum $Optional<AnyObject>, #Optional.None!enumelt // user: %57
  %50 = global_addr @_Tvs19_emptyStringStorageVs6UInt32 : $*UInt32 // user: %51
  %51 = address_to_pointer %50 : $*UInt32 to $Builtin.RawPointer // user: %57
  %52 = integer_literal $Builtin.Int64, 0         // user: %57
  // function_ref function signature specialization <Arg[0] = Exploded, Arg[1] = Exploded, Arg[2] = Exploded> of Swift._assertionFailed (Swift.StaticString, Swift.String, Swift.StaticString, Swift.UInt) -> ()
  %53 = function_ref @_TTSf4s_s_s_n___TFs16_assertionFailedFTVs12StaticStringSSS_Su_T_ : $@convention(thin) @noreturn (Builtin.RawPointer, Builtin.Word, Builtin.Int8, Builtin.RawPointer, Builtin.Int64, @owned Optional<AnyObject>, Builtin.RawPointer, Builtin.Word, Builtin.Int8, UInt) -> () // user: %57
  %54 = struct_extract %42 : $StaticString, #StaticString._flags // user: %57
  %55 = struct_extract %42 : $StaticString, #StaticString._byteSize // user: %57
  %56 = struct_extract %42 : $StaticString, #StaticString._startPtrOrData // user: %57
  %57 = apply %53(%46, %47, %48, %51, %52, %49, %56, %55, %54, %45) : $@convention(thin) @noreturn (Builtin.RawPointer, Builtin.Word, Builtin.Int8, Builtin.RawPointer, Builtin.Int64, @owned Optional<AnyObject>, Builtin.RawPointer, Builtin.Word, Builtin.Int8, UInt) -> ()
  unreachable                                     // id: %58
}

// Node.Node.balance () -> Node.Node<A>
sil hidden @_TFC4Node4Node7balancefT_GS0_x_ : $@convention(method) <T where T : Comparable, T : CustomStringConvertible> (@guaranteed Node<T>) -> @owned Node<T> {
// %0                                             // users: %1, %3, %16, %21, %34, %39, %61, %88, %93, %117, %144, %149, %152, %153
bb0(%0 : $Node<T>):
  debug_value %0 : $Node<T>, let, name "self", argno 1 // id: %1
  // function_ref Node.Node.balance () -> Node.Node<A>
  %2 = function_ref @_TFC4Node4Node7balancefT_GS0_x_ : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned Node<τ_0_0> // user: %11
  %3 = ref_element_addr %0 : $Node<T>, #Node.left // users: %6, %8
  %4 = integer_literal $Builtin.Int1, -1          // user: %6
  %5 = integer_literal $Builtin.Int1, 0           // user: %6
  %6 = select_enum_addr %3 : $*Optional<Node<T>>, case #Optional.Some!enumelt.1: %4, default %5 : $Builtin.Int1 // user: %7
  cond_br %6, bb1, bb28                           // id: %7

bb1:                                              // Preds: bb0
  %8 = unchecked_take_enum_data_addr %3 : $*Optional<Node<T>>, #Optional.Some!enumelt.1 // user: %9
  %9 = load %8 : $*Node<T>                        // users: %10, %11, %12
  strong_retain %9 : $Node<T>                     // id: %10
  %11 = apply %2<T>(%9) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned Node<τ_0_0> // user: %13
  strong_release %9 : $Node<T>                    // id: %12
  %13 = enum $Optional<Node<T>>, #Optional.Some!enumelt.1, %11 : $Node<T> // user: %14
  br bb2(%13 : $Optional<Node<T>>)                // id: %14

// %15                                            // user: %18
bb2(%15 : $Optional<Node<T>>):                    // Preds: bb1 bb28
  %16 = ref_element_addr %0 : $Node<T>, #Node.left // users: %17, %18
  %17 = load %16 : $*Optional<Node<T>>            // user: %19
  store %15 to %16 : $*Optional<Node<T>>          // id: %18
  release_value %17 : $Optional<Node<T>>          // id: %19
  // function_ref Node.Node.balance () -> Node.Node<A>
  %20 = function_ref @_TFC4Node4Node7balancefT_GS0_x_ : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned Node<τ_0_0> // user: %29
  %21 = ref_element_addr %0 : $Node<T>, #Node.right // users: %24, %26
  %22 = integer_literal $Builtin.Int1, -1         // user: %24
  %23 = integer_literal $Builtin.Int1, 0          // user: %24
  %24 = select_enum_addr %21 : $*Optional<Node<T>>, case #Optional.Some!enumelt.1: %22, default %23 : $Builtin.Int1 // user: %25
  cond_br %24, bb3, bb27                          // id: %25

bb3:                                              // Preds: bb2
  %26 = unchecked_take_enum_data_addr %21 : $*Optional<Node<T>>, #Optional.Some!enumelt.1 // user: %27
  %27 = load %26 : $*Node<T>                      // users: %28, %29, %30
  strong_retain %27 : $Node<T>                    // id: %28
  %29 = apply %20<T>(%27) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned Node<τ_0_0> // user: %31
  strong_release %27 : $Node<T>                   // id: %30
  %31 = enum $Optional<Node<T>>, #Optional.Some!enumelt.1, %29 : $Node<T> // user: %32
  br bb4(%31 : $Optional<Node<T>>)                // id: %32

// %33                                            // user: %36
bb4(%33 : $Optional<Node<T>>):                    // Preds: bb3 bb27
  %34 = ref_element_addr %0 : $Node<T>, #Node.right // users: %35, %36
  %35 = load %34 : $*Optional<Node<T>>            // user: %37
  store %33 to %34 : $*Optional<Node<T>>          // id: %36
  release_value %35 : $Optional<Node<T>>          // id: %37
  // function_ref Node.Node.balanceFactor.getter : Swift.Int
  %38 = function_ref @_TFC4Node4Nodeg13balanceFactorSi : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> Int // user: %39
  %39 = apply %38<T>(%0) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> Int // users: %40, %54, %96, %110
  debug_value %39 : $Int, let, name "$match"      // id: %40
  // function_ref static Swift.~= infix <A where A: Swift.Comparable, A: Swift.ForwardIndexType> (Swift.Range<A>, A) -> Swift.Bool
  %41 = function_ref @_TZFsoi2teuRxs10Comparablexs16ForwardIndexTyperFTGVs5Rangex_x_Sb : $@convention(thin) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : ForwardIndexType, τ_0_0.Distance : _SignedIntegerType, τ_0_0.Distance.IntegerLiteralType : _BuiltinIntegerLiteralConvertible> (@in Range<τ_0_0>, @in τ_0_0) -> Bool // user: %55
  %42 = integer_literal $Builtin.Int64, 1         // user: %43
  %43 = struct $Int (%42 : $Builtin.Int64)        // users: %48, %49
  %44 = integer_literal $Builtin.Int64, 9223372036854775807 // user: %45
  %45 = struct $Int (%44 : $Builtin.Int64)        // users: %48, %49
  br bb5                                          // id: %46

bb5:                                              // Preds: bb4
  br bb6                                          // id: %47

bb6:                                              // Preds: bb5
  %48 = struct $Range<Int> (%43 : $Int, %45 : $Int) // user: %52
  %49 = struct $Range<Int> (%43 : $Int, %45 : $Int)
  br bb7                                          // id: %50

bb7:                                              // Preds: bb6
  %51 = alloc_stack $Range<Int>                   // users: %52, %55, %58
  store %48 to %51 : $*Range<Int>                 // id: %52
  %53 = alloc_stack $Int                          // users: %54, %55, %57
  store %39 to %53 : $*Int                        // id: %54
  %55 = apply %41<Int, Int, Int, Int>(%51, %53) : $@convention(thin) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : ForwardIndexType, τ_0_0.Distance : _SignedIntegerType, τ_0_0.Distance.IntegerLiteralType : _BuiltinIntegerLiteralConvertible> (@in Range<τ_0_0>, @in τ_0_0) -> Bool // user: %56
  %56 = struct_extract %55 : $Bool, #Bool._value  // user: %59
  dealloc_stack %53 : $*Int                       // id: %57
  dealloc_stack %51 : $*Range<Int>                // id: %58
  cond_br %56, bb8, bb14                          // id: %59

bb8:                                              // Preds: bb7
  // function_ref static Swift.< infix <A where A: Swift.Comparable> (Swift.Optional<A>, Swift.Optional<A>) -> Swift.Bool
  %60 = function_ref @_TZFsoi1luRxs10ComparablerFTGSqx_GSqx__Sb : $@convention(thin) <τ_0_0 where τ_0_0 : Comparable> (@in Optional<τ_0_0>, @in Optional<τ_0_0>) -> Bool // user: %82
  %61 = ref_element_addr %0 : $Node<T>, #Node.right // users: %64, %66
  %62 = integer_literal $Builtin.Int1, -1         // user: %64
  %63 = integer_literal $Builtin.Int1, 0          // user: %64
  %64 = select_enum_addr %61 : $*Optional<Node<T>>, case #Optional.Some!enumelt.1: %62, default %63 : $Builtin.Int1 // user: %65
  cond_br %64, bb9, bb12                          // id: %65

bb9:                                              // Preds: bb8
  %66 = unchecked_take_enum_data_addr %61 : $*Optional<Node<T>>, #Optional.Some!enumelt.1 // user: %67
  %67 = load %66 : $*Node<T>                      // users: %68, %70, %71
  strong_retain %67 : $Node<T>                    // id: %68
  // function_ref Node.Node.balanceFactor.getter : Swift.Int
  %69 = function_ref @_TFC4Node4Nodeg13balanceFactorSi : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> Int // user: %70
  %70 = apply %69<T>(%67) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> Int // user: %72
  strong_release %67 : $Node<T>                   // id: %71
  %72 = enum $Optional<Int>, #Optional.Some!enumelt.1, %70 : $Int // user: %73
  br bb10(%72 : $Optional<Int>)                   // id: %73

// %74                                            // user: %76
bb10(%74 : $Optional<Int>):                       // Preds: bb9 bb12
  %75 = alloc_stack $Optional<Int>                // users: %76, %82, %85
  store %74 to %75 : $*Optional<Int>              // id: %76
  %77 = integer_literal $Builtin.Int64, 0         // user: %78
  %78 = struct $Int (%77 : $Builtin.Int64)        // user: %79
  %79 = enum $Optional<Int>, #Optional.Some!enumelt.1, %78 : $Int // user: %81
  %80 = alloc_stack $Optional<Int>                // users: %81, %82, %84
  store %79 to %80 : $*Optional<Int>              // id: %81
  %82 = apply %60<Int>(%75, %80) : $@convention(thin) <τ_0_0 where τ_0_0 : Comparable> (@in Optional<τ_0_0>, @in Optional<τ_0_0>) -> Bool // user: %83
  %83 = struct_extract %82 : $Bool, #Bool._value  // user: %86
  dealloc_stack %80 : $*Optional<Int>             // id: %84
  dealloc_stack %75 : $*Optional<Int>             // id: %85
  cond_br %83, bb11, bb13                         // id: %86

bb11:                                             // Preds: bb10
  // function_ref Node.Node.rotateRightLeft () -> Node.Node<A>
  %87 = function_ref @_TFC4Node4Node15rotateRightLeftfT_GS0_x_ : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned Node<τ_0_0> // user: %88
  %88 = apply %87<T>(%0) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned Node<τ_0_0> // user: %89
  br bb29(%88 : $Node<T>)                         // id: %89

bb12:                                             // Preds: bb8
  %90 = enum $Optional<Int>, #Optional.None!enumelt // user: %91
  br bb10(%90 : $Optional<Int>)                   // id: %91

bb13:                                             // Preds: bb10
  // function_ref Node.Node.rotateLeft () -> Node.Node<A>
  %92 = function_ref @_TFC4Node4Node10rotateLeftfT_GS0_x_ : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned Node<τ_0_0> // user: %93
  %93 = apply %92<T>(%0) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned Node<τ_0_0> // user: %94
  br bb29(%93 : $Node<T>)                         // id: %94

bb14:                                             // Preds: bb7
  br bb15                                         // id: %95

bb15:                                             // Preds: bb14
  debug_value %39 : $Int, let, name "$match"      // id: %96
  // function_ref static Swift.~= infix <A where A: Swift.Comparable, A: Swift.ForwardIndexType> (Swift.Range<A>, A) -> Swift.Bool
  %97 = function_ref @_TZFsoi2teuRxs10Comparablexs16ForwardIndexTyperFTGVs5Rangex_x_Sb : $@convention(thin) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : ForwardIndexType, τ_0_0.Distance : _SignedIntegerType, τ_0_0.Distance.IntegerLiteralType : _BuiltinIntegerLiteralConvertible> (@in Range<τ_0_0>, @in τ_0_0) -> Bool // user: %111
  %98 = integer_literal $Builtin.Int64, -9223372036854775808 // user: %99
  %99 = struct $Int (%98 : $Builtin.Int64)        // users: %104, %105
  %100 = integer_literal $Builtin.Int64, -1       // user: %101
  %101 = struct $Int (%100 : $Builtin.Int64)      // users: %104, %105
  br bb16                                         // id: %102

bb16:                                             // Preds: bb15
  br bb17                                         // id: %103

bb17:                                             // Preds: bb16
  %104 = struct $Range<Int> (%99 : $Int, %101 : $Int) // user: %108
  %105 = struct $Range<Int> (%99 : $Int, %101 : $Int)
  br bb18                                         // id: %106

bb18:                                             // Preds: bb17
  %107 = alloc_stack $Range<Int>                  // users: %108, %111, %114
  store %104 to %107 : $*Range<Int>               // id: %108
  %109 = alloc_stack $Int                         // users: %110, %111, %113
  store %39 to %109 : $*Int                       // id: %110
  %111 = apply %97<Int, Int, Int, Int>(%107, %109) : $@convention(thin) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : ForwardIndexType, τ_0_0.Distance : _SignedIntegerType, τ_0_0.Distance.IntegerLiteralType : _BuiltinIntegerLiteralConvertible> (@in Range<τ_0_0>, @in τ_0_0) -> Bool // user: %112
  %112 = struct_extract %111 : $Bool, #Bool._value // user: %115
  dealloc_stack %109 : $*Int                      // id: %113
  dealloc_stack %107 : $*Range<Int>               // id: %114
  cond_br %112, bb19, bb25                        // id: %115

bb19:                                             // Preds: bb18
  // function_ref static Swift.> infix <A where A: Swift.Comparable> (Swift.Optional<A>, Swift.Optional<A>) -> Swift.Bool
  %116 = function_ref @_TZFsoi1guRxs10ComparablerFTGSqx_GSqx__Sb : $@convention(thin) <τ_0_0 where τ_0_0 : Comparable> (@in Optional<τ_0_0>, @in Optional<τ_0_0>) -> Bool // user: %138
  %117 = ref_element_addr %0 : $Node<T>, #Node.left // users: %120, %122
  %118 = integer_literal $Builtin.Int1, -1        // user: %120
  %119 = integer_literal $Builtin.Int1, 0         // user: %120
  %120 = select_enum_addr %117 : $*Optional<Node<T>>, case #Optional.Some!enumelt.1: %118, default %119 : $Builtin.Int1 // user: %121
  cond_br %120, bb20, bb23                        // id: %121

bb20:                                             // Preds: bb19
  %122 = unchecked_take_enum_data_addr %117 : $*Optional<Node<T>>, #Optional.Some!enumelt.1 // user: %123
  %123 = load %122 : $*Node<T>                    // users: %124, %126, %127
  strong_retain %123 : $Node<T>                   // id: %124
  // function_ref Node.Node.balanceFactor.getter : Swift.Int
  %125 = function_ref @_TFC4Node4Nodeg13balanceFactorSi : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> Int // user: %126
  %126 = apply %125<T>(%123) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> Int // user: %128
  strong_release %123 : $Node<T>                  // id: %127
  %128 = enum $Optional<Int>, #Optional.Some!enumelt.1, %126 : $Int // user: %129
  br bb21(%128 : $Optional<Int>)                  // id: %129

// %130                                           // user: %132
bb21(%130 : $Optional<Int>):                      // Preds: bb20 bb23
  %131 = alloc_stack $Optional<Int>               // users: %132, %138, %141
  store %130 to %131 : $*Optional<Int>            // id: %132
  %133 = integer_literal $Builtin.Int64, 0        // user: %134
  %134 = struct $Int (%133 : $Builtin.Int64)      // user: %135
  %135 = enum $Optional<Int>, #Optional.Some!enumelt.1, %134 : $Int // user: %137
  %136 = alloc_stack $Optional<Int>               // users: %137, %138, %140
  store %135 to %136 : $*Optional<Int>            // id: %137
  %138 = apply %116<Int>(%131, %136) : $@convention(thin) <τ_0_0 where τ_0_0 : Comparable> (@in Optional<τ_0_0>, @in Optional<τ_0_0>) -> Bool // user: %139
  %139 = struct_extract %138 : $Bool, #Bool._value // user: %142
  dealloc_stack %136 : $*Optional<Int>            // id: %140
  dealloc_stack %131 : $*Optional<Int>            // id: %141
  cond_br %139, bb22, bb24                        // id: %142

bb22:                                             // Preds: bb21
  // function_ref Node.Node.rotateLeftRight () -> Node.Node<A>
  %143 = function_ref @_TFC4Node4Node15rotateLeftRightfT_GS0_x_ : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned Node<τ_0_0> // user: %144
  %144 = apply %143<T>(%0) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned Node<τ_0_0> // user: %145
  br bb29(%144 : $Node<T>)                        // id: %145

bb23:                                             // Preds: bb19
  %146 = enum $Optional<Int>, #Optional.None!enumelt // user: %147
  br bb21(%146 : $Optional<Int>)                  // id: %147

bb24:                                             // Preds: bb21
  // function_ref Node.Node.rotateRight () -> Node.Node<A>
  %148 = function_ref @_TFC4Node4Node11rotateRightfT_GS0_x_ : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned Node<τ_0_0> // user: %149
  %149 = apply %148<T>(%0) : $@convention(method) <τ_0_0 where τ_0_0 : Comparable, τ_0_0 : CustomStringConvertible> (@guaranteed Node<τ_0_0>) -> @owned Node<τ_0_0> // user: %150
  br bb29(%149 : $Node<T>)                        // id: %150

bb25:                                             // Preds: bb18
  br bb26                                         // id: %151

bb26:                                             // Preds: bb25
  strong_retain %0 : $Node<T>                     // id: %152
  br bb29(%0 : $Node<T>)                          // id: %153

bb27:                                             // Preds: bb2
  %154 = enum $Optional<Node<T>>, #Optional.None!enumelt // user: %155
  br bb4(%154 : $Optional<Node<T>>)               // id: %155

bb28:                                             // Preds: bb0
  %156 = enum $Optional<Node<T>>, #Optional.None!enumelt // user: %157
  br bb2(%156 : $Optional<Node<T>>)               // id: %157

// %158                                           // user: %159
bb29(%158 : $Node<T>):                            // Preds: bb11 bb13 bb22 bb24 bb26
  return %158 : $Node<T>                          // id: %159
}

// static Swift.~= infix <A where A: Swift.Comparable, A: Swift.ForwardIndexType> (Swift.Range<A>, A) -> Swift.Bool
sil [fragile] @_TZFsoi2teuRxs10Comparablexs16ForwardIndexTyperFTGVs5Rangex_x_Sb : $@convention(thin) <I where I : Comparable, I : ForwardIndexType, I.Distance : _SignedIntegerType, I.Distance.IntegerLiteralType : _BuiltinIntegerLiteralConvertible> (@in Range<I>, @in I) -> Bool

// static Swift...< infix <A where A: Swift.Comparable, A: Swift.ForwardIndexType> (A, A) -> Swift.Range<A>
sil [transparent] [fragile] @_TZFsoi3zzluRxs10Comparablexs16ForwardIndexTyperFTxx_GVs5Rangex_ : $@convention(thin) <Pos where Pos : Comparable, Pos : ForwardIndexType, Pos.Distance : _SignedIntegerType, Pos.Distance.IntegerLiteralType : _BuiltinIntegerLiteralConvertible> (@out Range<Pos>, @in Pos, @in Pos) -> ()

// static Swift.Int.max.getter : Swift.Int
sil [transparent] [fragile] @_TZFSig3maxSi : $@convention(thin) (@thin Int.Type) -> Int

// static Swift.Int.min.getter : Swift.Int
sil [transparent] [fragile] @_TZFSig3minSi : $@convention(thin) (@thin Int.Type) -> Int

// static Swift.< infix <A where A: Swift.Comparable> (Swift.Optional<A>, Swift.Optional<A>) -> Swift.Bool
sil [fragile] @_TZFsoi1luRxs10ComparablerFTGSqx_GSqx__Sb : $@convention(thin) <T where T : Comparable> (@in Optional<T>, @in Optional<T>) -> Bool

// static Swift.> infix <A where A: Swift.Comparable> (Swift.Optional<A>, Swift.Optional<A>) -> Swift.Bool
sil [fragile] @_TZFsoi1guRxs10ComparablerFTGSqx_GSqx__Sb : $@convention(thin) <T where T : Comparable> (@in Optional<T>, @in Optional<T>) -> Bool

// Node.Node.first.getter : Node.Node<A>
sil hidden @_TFC4Node4Nodeg5firstGS0_x_ : $@convention(method) <T where T : Comparable, T : CustomStringConvertible> (@guaranteed Node<T>) -> @owned Node<T> {
// %0                                             // users: %2, %3, %32, %33
bb0(%0 : $Node<T>):
  %1 = alloc_stack $Node<T>, var, name "first"    // users: %9, %11, %23, %24, %28, %30, %35
  debug_value %0 : $Node<T>, let, name "self", argno 1 // id: %2
  %3 = ref_element_addr %0 : $Node<T>, #Node.left // user: %4
  %4 = load %3 : $*Optional<Node<T>>              // users: %5, %6
  retain_value %4 : $Optional<Node<T>>            // id: %5
  switch_enum %4 : $Optional<Node<T>>, case #Optional.Some!enumelt.1: bb2, default bb1 // id: %6

bb1:                                              // Preds: bb0
  br bb7                                          // id: %7

// %8                                             // user: %9
bb2(%8 : $Node<T>):                               // Preds: bb0
  store %8 to %1 : $*Node<T>                      // id: %9
  br bb3                                          // id: %10

bb3:                                              // Preds: bb2 bb5
  %11 = load %1 : $*Node<T>                       // users: %12, %13, %17, %21
  strong_retain %11 : $Node<T>                    // id: %12
  %13 = ref_element_addr %11 : $Node<T>, #Node.left // user: %14
  %14 = load %13 : $*Optional<Node<T>>            // users: %15, %16
  retain_value %14 : $Optional<Node<T>>           // id: %15
  switch_enum %14 : $Optional<Node<T>>, case #Optional.Some!enumelt.1: bb5, default bb4 // id: %16

bb4:                                              // Preds: bb3
  strong_release %11 : $Node<T>                   // id: %17
  br bb6                                          // id: %18

// %19                                            // users: %20, %22, %24, %26
bb5(%19 : $Node<T>):                              // Preds: bb3
  debug_value %19 : $Node<T>, let, name "left"    // id: %20
  strong_release %11 : $Node<T>                   // id: %21
  strong_retain %19 : $Node<T>                    // id: %22
  %23 = load %1 : $*Node<T>                       // user: %25
  store %19 to %1 : $*Node<T>                     // id: %24
  strong_release %23 : $Node<T>                   // id: %25
  strong_release %19 : $Node<T>                   // id: %26
  br bb3                                          // id: %27

bb6:                                              // Preds: bb4
  %28 = load %1 : $*Node<T>                       // users: %29, %31
  strong_retain %28 : $Node<T>                    // id: %29
  destroy_addr %1 : $*Node<T>                     // id: %30
  br bb8(%28 : $Node<T>)                          // id: %31

bb7:                                              // Preds: bb1
  strong_retain %0 : $Node<T>                     // id: %32
  br bb8(%0 : $Node<T>)                           // id: %33

// %34                                            // user: %36
bb8(%34 : $Node<T>):                              // Preds: bb6 bb7
  dealloc_stack %1 : $*Node<T>                    // id: %35
  return %34 : $Node<T>                           // id: %36
}

// Node.Node.last.getter : Node.Node<A>
sil hidden @_TFC4Node4Nodeg4lastGS0_x_ : $@convention(method) <T where T : Comparable, T : CustomStringConvertible> (@guaranteed Node<T>) -> @owned Node<T> {
// %0                                             // users: %2, %3, %32, %33
bb0(%0 : $Node<T>):
  %1 = alloc_stack $Node<T>, var, name "last"     // users: %9, %11, %23, %24, %28, %30, %35
  debug_value %0 : $Node<T>, let, name "self", argno 1 // id: %2
  %3 = ref_element_addr %0 : $Node<T>, #Node.right // user: %4
  %4 = load %3 : $*Optional<Node<T>>              // users: %5, %6
  retain_value %4 : $Optional<Node<T>>            // id: %5
  switch_enum %4 : $Optional<Node<T>>, case #Optional.Some!enumelt.1: bb2, default bb1 // id: %6

bb1:                                              // Preds: bb0
  br bb7                                          // id: %7

// %8                                             // user: %9
bb2(%8 : $Node<T>):                               // Preds: bb0
  store %8 to %1 : $*Node<T>                      // id: %9
  br bb3                                          // id: %10

bb3:                                              // Preds: bb2 bb5
  %11 = load %1 : $*Node<T>                       // users: %12, %13, %17, %21
  strong_retain %11 : $Node<T>                    // id: %12
  %13 = ref_element_addr %11 : $Node<T>, #Node.right // user: %14
  %14 = load %13 : $*Optional<Node<T>>            // users: %15, %16
  retain_value %14 : $Optional<Node<T>>           // id: %15
  switch_enum %14 : $Optional<Node<T>>, case #Optional.Some!enumelt.1: bb5, default bb4 // id: %16

bb4:                                              // Preds: bb3
  strong_release %11 : $Node<T>                   // id: %17
  br bb6                                          // id: %18

// %19                                            // users: %20, %22, %24, %26
bb5(%19 : $Node<T>):                              // Preds: bb3
  debug_value %19 : $Node<T>, let, name "right"   // id: %20
  strong_release %11 : $Node<T>                   // id: %21
  strong_retain %19 : $Node<T>                    // id: %22
  %23 = load %1 : $*Node<T>                       // user: %25
  store %19 to %1 : $*Node<T>                     // id: %24
  strong_release %23 : $Node<T>                   // id: %25
  strong_release %19 : $Node<T>                   // id: %26
  br bb3                                          // id: %27

bb6:                                              // Preds: bb4
  %28 = load %1 : $*Node<T>                       // users: %29, %31
  strong_retain %28 : $Node<T>                    // id: %29
  destroy_addr %1 : $*Node<T>                     // id: %30
  br bb8(%28 : $Node<T>)                          // id: %31

bb7:                                              // Preds: bb1
  strong_retain %0 : $Node<T>                     // id: %32
  br bb8(%0 : $Node<T>)                           // id: %33

// %34                                            // user: %36
bb8(%34 : $Node<T>):                              // Preds: bb6 bb7
  dealloc_stack %1 : $*Node<T>                    // id: %35
  return %34 : $Node<T>                           // id: %36
}

// globalinit_33_1BDF70FFC18749BAB495A73B459ED2F0_func5
sil private_external [fragile] @globalinit_33_1BDF70FFC18749BAB495A73B459ED2F0_func5 : $@convention(thin) () -> ()

// Swift.ManagedBufferPointer.init (_uncheckedBufferClass : Swift.AnyObject.Type, minimumCapacity : Swift.Int) -> Swift.ManagedBufferPointer<A, B>
sil hidden_external [fragile] @_TFVs20ManagedBufferPointerCfT21_uncheckedBufferClassPMPs9AnyObject_15minimumCapacitySi_GS_xq__ : $@convention(thin) <Value, Element> (@thick AnyObject.Type, Int, @thin ManagedBufferPointer<Value, Element>.Type) -> @owned ManagedBufferPointer<Value, Element>

// static Swift.Array._adoptStorage (Swift.AnyObject, count : Swift.Int) -> (Swift.Array<A>, Swift.UnsafeMutablePointer<A>)
sil hidden_external [fragile] [_semantics "array.uninitialized"] @_TZFSa13_adoptStoragefTPs9AnyObject_5countSi_TGSax_GSpx__ : $@convention(thin) <Element> (@owned AnyObject, Int, @thin Array<Element>.Type) -> @owned (Array<Element>, UnsafeMutablePointer<Element>)

// Swift.ManagedBufferPointer.buffer.getter : Swift.AnyObject
sil [fragile] @_TFVs20ManagedBufferPointerg6bufferPs9AnyObject_ : $@convention(method) <Value, Element> (@guaranteed ManagedBufferPointer<Value, Element>) -> @owned AnyObject

// static Swift.Array._allocateUninitialized (Swift.Int) -> (Swift.Array<A>, Swift.UnsafeMutablePointer<A>)
sil hidden_external [fragile] [_semantics "array.uninitialized"] @_TZFSa22_allocateUninitializedfSiTGSax_GSpx__ : $@convention(thin) <Element> (Int, @thin Array<Element>.Type) -> @owned (Array<Element>, UnsafeMutablePointer<Element>)

// Swift._ContiguousArrayStorage.init () -> Swift._ContiguousArrayStorage<A>
sil hidden_external [fragile] @_TFCs23_ContiguousArrayStoragecfT_GS_x_ : $@convention(method) <Element> (@owned _ContiguousArrayStorage<Element>) -> @owned _ContiguousArrayStorage<Element>

// Swift._ContiguousArrayStorageBase.withUnsafeBufferOfObjects <A> ((Swift.UnsafeBufferPointer<Swift.AnyObject>) throws -> A) throws -> A
sil hidden_external [fragile] @_TFCs27_ContiguousArrayStorageBase25withUnsafeBufferOfObjectsurfzFzGSRPs9AnyObject__xx : $@convention(method) <R> (@out R, @owned @callee_owned (@out R, UnsafeBufferPointer<AnyObject>) -> @error ErrorType, @guaranteed _ContiguousArrayStorageBase) -> @error ErrorType

// Swift._ContiguousArrayStorage1._withVerbatimBridgedUnsafeBuffer <A> ((Swift.UnsafeBufferPointer<Swift.AnyObject>) throws -> A) throws -> Swift.Optional<A>
sil hidden_external [fragile] @_TFCs24_ContiguousArrayStorage132_withVerbatimBridgedUnsafeBufferurfzFzGSRPs9AnyObject__xGSqx_ : $@convention(method) <R> (@out Optional<R>, @owned @callee_owned (@out R, UnsafeBufferPointer<AnyObject>) -> @error ErrorType, @guaranteed _ContiguousArrayStorage1) -> @error ErrorType

// Swift._ContiguousArrayStorage._getNonVerbatimBridgedCount () -> Swift.Int
sil hidden_external [fragile] @_TFCs23_ContiguousArrayStorage27_getNonVerbatimBridgedCountfT_Si : $@convention(method) <Element> (@guaranteed _ContiguousArrayStorage<Element>) -> Int

// Swift._ContiguousArrayStorage._getNonVerbatimBridgedHeapBuffer () -> Swift._HeapBuffer<Swift.Int, Swift.AnyObject>
sil hidden_external [fragile] @_TFCs23_ContiguousArrayStorage32_getNonVerbatimBridgedHeapBufferfT_GVs11_HeapBufferSiPs9AnyObject__ : $@convention(method) <Element> (@guaranteed _ContiguousArrayStorage<Element>) -> @owned _HeapBuffer<Int, AnyObject>

// Swift._ContiguousArrayStorage.staticElementType.getter : protocol<>.Type
sil hidden_external [fragile] @_TFCs23_ContiguousArrayStorageg17staticElementTypePMP_ : $@convention(method) <Element> (@guaranteed _ContiguousArrayStorage<Element>) -> @thick protocol<>.Type

// Swift._ContiguousArrayStorage._withVerbatimBridgedUnsafeBufferImpl ((Swift.UnsafeBufferPointer<Swift.AnyObject>) throws -> ()) throws -> ()
sil hidden_external [fragile] @_TFCs23_ContiguousArrayStorage36_withVerbatimBridgedUnsafeBufferImplfzFzGSRPs9AnyObject__T_T_ : $@convention(method) <Element> (@owned @callee_owned (UnsafeBufferPointer<AnyObject>) -> @error ErrorType, @guaranteed _ContiguousArrayStorage<Element>) -> @error ErrorType

// Swift._ContiguousArrayStorage.__deallocating_deinit
sil hidden_external [fragile] @_TFCs23_ContiguousArrayStorageD : $@convention(method) <Element> (@owned _ContiguousArrayStorage<Element>) -> ()

// Swift._ContiguousArrayStorageBase._withVerbatimBridgedUnsafeBuffer <A> ((Swift.UnsafeBufferPointer<Swift.AnyObject>) throws -> A) throws -> Swift.Optional<A>
sil hidden_external [fragile] @_TFCs27_ContiguousArrayStorageBase32_withVerbatimBridgedUnsafeBufferurfzFzGSRPs9AnyObject__xGSqx_ : $@convention(method) <R> (@out Optional<R>, @owned @callee_owned (@out R, UnsafeBufferPointer<AnyObject>) -> @error ErrorType, @guaranteed _ContiguousArrayStorageBase) -> @error ErrorType

// Swift._EmptyArrayStorage._withVerbatimBridgedUnsafeBuffer <A> ((Swift.UnsafeBufferPointer<Swift.AnyObject>) throws -> A) throws -> Swift.Optional<A>
sil hidden_external [fragile] @_TFCs18_EmptyArrayStorage32_withVerbatimBridgedUnsafeBufferurfzFzGSRPs9AnyObject__xGSqx_ : $@convention(method) <R> (@out Optional<R>, @owned @callee_owned (@out R, UnsafeBufferPointer<AnyObject>) -> @error ErrorType, @guaranteed _EmptyArrayStorage) -> @error ErrorType

// Swift._ContiguousArrayStorage1.(_withVerbatimBridgedUnsafeBuffer <A> ((Swift.UnsafeBufferPointer<Swift.AnyObject>) throws -> A) throws -> Swift.Optional<A>).(closure #1)
sil shared_external [fragile] @_TFFCs24_ContiguousArrayStorage132_withVerbatimBridgedUnsafeBufferurFzFzGSRPs9AnyObject__xGSqx_U_FzGSRPS0___T_ : $@convention(thin) <R> (UnsafeBufferPointer<AnyObject>, @inout_aliasable Optional<R>, @owned @callee_owned (@out R, UnsafeBufferPointer<AnyObject>) -> @error ErrorType) -> @error ErrorType {
// %0                                             // users: %3, %9
// %1                                             // users: %4, %12
// %2                                             // users: %5, %8, %9, %14, %19
bb0(%0 : $UnsafeBufferPointer<AnyObject>, %1 : $*Optional<R>, %2 : $@callee_owned (@out R, UnsafeBufferPointer<AnyObject>) -> @error ErrorType):
  debug_value %0 : $UnsafeBufferPointer<AnyObject> // id: %3
  debug_value_addr %1 : $*Optional<R>             // id: %4
  debug_value %2 : $@callee_owned (@out R, UnsafeBufferPointer<AnyObject>) -> @error ErrorType // id: %5
  %6 = alloc_stack $Optional<R>                   // users: %7, %11, %12, %13, %18
  %7 = init_enum_data_addr %6 : $*Optional<R>, #Optional.Some!enumelt.1 // user: %9
  strong_retain %2 : $@callee_owned (@out R, UnsafeBufferPointer<AnyObject>) -> @error ErrorType // id: %8
  try_apply %2(%7, %0) : $@callee_owned (@out R, UnsafeBufferPointer<AnyObject>) -> @error ErrorType, normal bb1, error bb2 // id: %9

bb1(%10 : $()):                                   // Preds: bb0
  inject_enum_addr %6 : $*Optional<R>, #Optional.Some!enumelt.1 // id: %11
  copy_addr [take] %6 to %1 : $*Optional<R>       // id: %12
  dealloc_stack %6 : $*Optional<R>                // id: %13
  strong_release %2 : $@callee_owned (@out R, UnsafeBufferPointer<AnyObject>) -> @error ErrorType // id: %14
  %15 = tuple ()                                  // user: %16
  return %15 : $()                                // id: %16

// %17                                            // user: %20
bb2(%17 : $ErrorType):                            // Preds: bb0
  dealloc_stack %6 : $*Optional<R>                // id: %18
  strong_release %2 : $@callee_owned (@out R, UnsafeBufferPointer<AnyObject>) -> @error ErrorType // id: %19
  throw %17 : $ErrorType                          // id: %20
}

// Swift._ContiguousArrayStorage.__manager.getter : Swift.ManagedBufferPointer<Swift._ArrayBody, A>
sil hidden_external [fragile] @_TFCs23_ContiguousArrayStorageg9__managerGVs20ManagedBufferPointerVs10_ArrayBodyx_ : $@convention(method) <Element> (@guaranteed _ContiguousArrayStorage<Element>) -> @owned ManagedBufferPointer<_ArrayBody, Element>

// Swift.ManagedBufferPointer.value.unsafeAddressor : A
sil [fragile] @_TFVs20ManagedBufferPointerlu5valuex : $@convention(method) <Value, Element> (@guaranteed ManagedBufferPointer<Value, Element>) -> UnsafePointer<Value>

// swift_bufferAllocate
sil hidden_external [fragile] @swift_bufferAllocate : $@convention(thin) (@thick AnyObject.Type, Int, Int) -> @owned AnyObject

// Swift.ManagedBufferPointer._elementPointer.getter : Swift.UnsafeMutablePointer<B>
sil hidden_external [fragile] @_TFVs20ManagedBufferPointerg15_elementPointerGSpq__ : $@convention(method) <Value, Element> (@guaranteed ManagedBufferPointer<Value, Element>) -> UnsafeMutablePointer<Element>

// function signature specialization <Arg[0] = Exploded, Arg[1] = Exploded, Arg[2] = Dead, Arg[3] = Dead> of Swift._fatalErrorMessage (Swift.StaticString, Swift.StaticString, Swift.StaticString, Swift.UInt) -> ()
sil [fragile] [noinline] [_semantics "arc.programtermination_point"] [_semantics "stdlib_binary_only"] @_TTSf4s_s_d_d___TFs18_fatalErrorMessageFTVs12StaticStringS_S_Su_T_ : $@convention(thin) @noreturn (Builtin.RawPointer, Builtin.Word, Builtin.Int8, Builtin.RawPointer, Builtin.Word, Builtin.Int8) -> ()

// Swift._bridgeToObjectiveCUnconditional <A> (A) -> Swift.AnyObject
sil [fragile] @_TFs32_bridgeToObjectiveCUnconditionalurFxPs9AnyObject_ : $@convention(thin) <T> (@in T) -> @owned AnyObject

// Swift._isBridgedVerbatimToObjectiveC <A> (A.Type) -> Swift.Bool
sil [fragile] @_TFs30_isBridgedVerbatimToObjectiveCurFMxSb : $@convention(thin) <T> (@thick T.Type) -> Bool

// Swift._ContiguousArrayStorage.(_withVerbatimBridgedUnsafeBufferImpl ((Swift.UnsafeBufferPointer<Swift.AnyObject>) throws -> ()) throws -> ()).($defer #1) () -> ()
sil shared_external [fragile] @_TFFCs23_ContiguousArrayStorage36_withVerbatimBridgedUnsafeBufferImplFzFzGSRPs9AnyObject__T_T_L_6$deferfT_T_ : $@convention(thin) <Element> (@owned _ContiguousArrayStorage<Element>) -> () {
// %0                                             // users: %1, %3, %6
bb0(%0 : $_ContiguousArrayStorage<Element>):
  debug_value %0 : $_ContiguousArrayStorage<Element> // id: %1
  // function_ref Swift._ContiguousArrayStorage.__manager.getter : Swift.ManagedBufferPointer<Swift._ArrayBody, A>
  %2 = function_ref @_TFCs23_ContiguousArrayStorageg9__managerGVs20ManagedBufferPointerVs10_ArrayBodyx_ : $@convention(method) <τ_0_0> (@guaranteed _ContiguousArrayStorage<τ_0_0>) -> @owned ManagedBufferPointer<_ArrayBody, τ_0_0> // user: %3
  %3 = apply %2<Element>(%0) : $@convention(method) <τ_0_0> (@guaranteed _ContiguousArrayStorage<τ_0_0>) -> @owned ManagedBufferPointer<_ArrayBody, τ_0_0> // user: %4
  %4 = struct_extract %3 : $ManagedBufferPointer<_ArrayBody, Element>, #ManagedBufferPointer._nativeBuffer // user: %5
  strong_release %4 : $Builtin.NativeObject       // id: %5
  strong_release %0 : $_ContiguousArrayStorage<Element> // id: %6
  %7 = tuple ()                                   // user: %8
  return %7 : $()                                 // id: %8
}

// Swift._ContiguousArrayStorage.deinit
sil hidden_external [fragile] @_TFCs23_ContiguousArrayStoraged : $@convention(method) <Element> (@guaranteed _ContiguousArrayStorage<Element>) -> @owned Builtin.NativeObject

// Swift._HeapBufferStorage.init () -> Swift._HeapBufferStorage<A, B>
sil [fragile] @_TFCs18_HeapBufferStoragecfT_GS_xq__ : $@convention(method) <Value, Element> (@owned _HeapBufferStorage<Value, Element>) -> @owned _HeapBufferStorage<Value, Element>

// Swift._HeapBufferStorage.__deallocating_deinit
sil [fragile] @_TFCs18_HeapBufferStorageD : $@convention(method) <Value, Element> (@owned _HeapBufferStorage<Value, Element>) -> ()

// Swift._HeapBufferStorage.deinit
sil [fragile] @_TFCs18_HeapBufferStoraged : $@convention(method) <Value, Element> (@guaranteed _HeapBufferStorage<Value, Element>) -> @owned Builtin.NativeObject

// function signature specialization <Arg[3] = Dead> of Swift.String.init (_builtinStringLiteral : Builtin.RawPointer, byteSize : Builtin.Word, isASCII : Builtin.Int1) -> Swift.String
sil [fragile] [readonly] [_semantics "string.makeUTF8"] @_TTSf4n_n_n_d___TFSSCfT21_builtinStringLiteralBp8byteSizeBw7isASCIIBi1__SS : $@convention(thin) (Builtin.RawPointer, Builtin.Word, Builtin.Int1) -> @owned String

// generic specialization <Swift.String with Swift.String : Swift.Streamable in Swift> of Swift._toStringReadOnlyStreamable <A where A: Swift.Streamable> (A) -> Swift.String
sil shared_external [fragile] [noinline] [readonly] @_TTSg5SSSSs10Streamables___TFs27_toStringReadOnlyStreamableuRxs10StreamablerFxSS : $@convention(thin) (@in String) -> @owned String {
// %0                                             // users: %1, %2
bb0(%0 : $*String):
  debug_value_addr %0 : $*String                  // id: %1
  %2 = struct_element_addr %0 : $*String, #String._core // user: %3
  %3 = load %2 : $*_StringCore                    // user: %4
  %4 = struct $String (%3 : $_StringCore)         // user: %5
  return %4 : $String                             // id: %5
}

// Swift.String.init <A> (A) -> Swift.String
sil [fragile] @_TFSSCurfxSS : $@convention(thin) <T> (@in T, @thin String.Type) -> @owned String

// function signature specialization <Arg[0] = Owned To Guaranteed, Arg[1] = Dead> of Swift.String.init (stringInterpolation : Swift.Array<Swift.String>...) -> Swift.String
sil [fragile] [readonly] @_TTSf4g_d___TFSSCft19stringInterpolationGSaSS__SS : $@convention(thin) (@guaranteed Array<String>) -> @owned String

// static Swift.ManagedBufferPointer._sanityCheckValidBufferClass (Swift.AnyObject.Type, creating : Swift.Bool) -> ()
sil hidden_external [fragile] @_TZFVs20ManagedBufferPointer28_sanityCheckValidBufferClassfTPMPs9AnyObject_8creatingSb_T_ : $@convention(thin) <Value, Element> (@thick AnyObject.Type, Bool, @thin ManagedBufferPointer<Value, Element>.Type) -> ()

// static Swift.ManagedBufferPointer._elementOffset.getter : Swift.Int
sil hidden_external [fragile] @_TZFVs20ManagedBufferPointerg14_elementOffsetSi : $@convention(thin) <Value, Element> (@thin ManagedBufferPointer<Value, Element>.Type) -> Int

// static Swift.ManagedBufferPointer._alignmentMask.getter : Swift.Int
sil hidden_external [fragile] @_TZFVs20ManagedBufferPointerg14_alignmentMaskSi : $@convention(thin) <Value, Element> (@thin ManagedBufferPointer<Value, Element>.Type) -> Int

// Swift._ContiguousArrayBuffer.init (count : Swift.Int, storage : Swift._ContiguousArrayStorage<A>) -> Swift._ContiguousArrayBuffer<A>
sil hidden_external [fragile] @_TFVs22_ContiguousArrayBufferCfT5countSi7storageGCs23_ContiguousArrayStoragex__GS_x_ : $@convention(thin) <Element> (Int, @owned _ContiguousArrayStorage<Element>, @thin _ContiguousArrayBuffer<Element>.Type) -> @owned _ContiguousArrayBuffer<Element>

// Swift.Array.init (Swift._ArrayBuffer<A>) -> Swift.Array<A>
sil [fragile] @_TFSaCfGVs12_ArrayBufferx_GSax_ : $@convention(thin) <Element> (@owned _ArrayBuffer<Element>, @thin Array<Element>.Type) -> @owned Array<Element>

// Swift._ArrayBuffer.init (Swift._ContiguousArrayBuffer<A>, shiftedToStartIndex : Swift.Int) -> Swift._ArrayBuffer<A>
sil [fragile] @_TFVs12_ArrayBufferCfTGVs22_ContiguousArrayBufferx_19shiftedToStartIndexSi_GS_x_ : $@convention(thin) <Element> (@owned _ContiguousArrayBuffer<Element>, Int, @thin _ArrayBuffer<Element>.Type) -> @owned _ArrayBuffer<Element>

// Swift._ContiguousArrayBuffer.firstElementAddress.getter : Swift.UnsafeMutablePointer<A>
sil [fragile] @_TFVs22_ContiguousArrayBufferg19firstElementAddressGSpx_ : $@convention(method) <Element> (@guaranteed _ContiguousArrayBuffer<Element>) -> UnsafeMutablePointer<Element>

// Swift.Array.init (_uninitializedCount : Swift.Int) -> Swift.Array<A>
sil hidden_external [fragile] @_TFSaCfT19_uninitializedCountSi_GSax_ : $@convention(thin) <Element> (Int, @thin Array<Element>.Type) -> @owned Array<Element>

// Swift._ArrayBuffer.firstElementAddress.getter : Swift.UnsafeMutablePointer<A>
sil [fragile] @_TFVs12_ArrayBufferg19firstElementAddressGSpx_ : $@convention(method) <Element> (@guaranteed _ArrayBuffer<Element>) -> UnsafeMutablePointer<Element>

// generic specialization <Swift.String> of Swift.Array._getCount () -> Swift.Int
sil [_semantics "array.get_count"] @_TTSg5SS___TFSa9_getCountfT_Si : $@convention(method) (@guaranteed Array<String>) -> Int

// function signature specialization <Arg[0] = Dead> of generic specialization <Swift.String> of Swift.Array._hoistableIsNativeTypeChecked () -> Swift.Bool
sil @_TTSf4d___TTSg5SS___TFSa29_hoistableIsNativeTypeCheckedfT_Sb : $@convention(thin) () -> Bool

// generic specialization <Swift.String> of Swift.Array._getElement (Swift.Int, wasNativeTypeChecked : Swift.Bool, matchingSubscriptCheck : Swift._DependenceToken) -> A
sil [always_inline] [_semantics "array.get_element"] @_TTSg5SS___TFSa11_getElementfTSi20wasNativeTypeCheckedSb22matchingSubscriptCheckVs16_DependenceToken_x : $@convention(method) (@out String, Int, Bool, _DependenceToken, @guaranteed Array<String>) -> ()

// function signature specialization <Arg[0] = Owned To Guaranteed and Exploded> of Swift._StringCore.append (Swift._StringCore) -> ()
sil hidden_external [fragile] @_TTSf4gs_n___TFVs11_StringCore6appendfS_T_ : $@convention(method) (Builtin.RawPointer, Builtin.Int64, @guaranteed Optional<AnyObject>, @inout _StringCore) -> ()

// function signature specialization <Arg[0] = Dead, Arg[4] = Dead> of generic specialization <Swift.UTF8 with Swift.UTF8 : Swift.UnicodeCodecType in Swift, Swift.UnsafeBufferPointer<Swift.UInt8> with Swift.UnsafeBufferPointer<Swift.UInt8> : Swift.CollectionType in Swift, Swift.UInt8, Swift.UnsafeBufferPointerGenerator<Swift.UInt8> with Swift.UnsafeBufferPointerGenerator<Swift.UInt8> : Swift.GeneratorType in Swift, Swift.Int with Swift.Int : Swift.ForwardIndexType in Swift, Swift.Int with Swift.Int : Swift._SignedIntegerType in Swift, Swift.Int with Swift.Int : Swift._BuiltinIntegerLiteralConvertible in Swift, Swift.Int, Swift.Slice<Swift.UnsafeBufferPointer<Swift.UInt8>> with Swift.Slice<Swift.UnsafeBufferPointer<Swift.UInt8>> : Swift.Indexable in Swift and Swift.Slice<Swift.UnsafeBufferPointer<Swift.UInt8>> : Swift.SequenceType in Swift, Swift.IndexingGenerator<Swift.Slice<Swift.UnsafeBufferPointer<Swift.UInt8>>> with Swift.IndexingGenerator<Swift.Slice<Swift.UnsafeBufferPointer<Swift.UInt8>>> : Swift.GeneratorType in Swift, Swift.UInt8, Swift.Int with Swift.Int : Swift.ForwardIndexType in Swift, Swift.Int with Swift.Int : Swift._SignedIntegerType in Swift, Swift.Int with Swift.Int : Swift._BuiltinIntegerLiteralConvertible in Swift, Swift.Int, Swift.Slice<Swift.UnsafeBufferPointer<Swift.UInt8>>, Swift.UInt8, Swift.UInt8> of static Swift._StringBuffer.fromCodeUnits <A, B where A: Swift.UnicodeCodecType, B: Swift.CollectionType, A.CodeUnit == B.Generator.Element> (A.Type, input : B, repairIllFormedSequences : Swift.Bool, minimumCapacity : Swift.Int) -> (Swift.Optional<Swift._StringBuffer>, hadError : Swift.Bool)
sil shared_external [fragile] @_TTSf4d_n_n_n_d___TTSg5Vs4UTF8S_s16UnicodeCodecTypes_GSRVs5UInt8_GSRS1__s14CollectionTypes_S1__GVs28UnsafeBufferPointerGeneratorS1__GS3_S1__s13GeneratorTypes_SiSis16ForwardIndexTypes_SiSis18_SignedIntegerTypes_SiSis33_BuiltinIntegerLiteralConvertibles_Si_GVs5SliceGSRS1___GS8_GSRS1___s9IndexablesGS8_GSRS1___s12SequenceTypes_GVs17IndexingGeneratorGS8_GSRS1____GS11_GS8_GSRS1____S4_s_S1__SiSiS5_s_SiSiS6_s_SiSiS7_s_Si_GS8_GSRS1____S1__S1____TZFVs13_StringBuffer13fromCodeUnitsu0_Rxs16UnicodeCodecType_s14CollectionTypewx8CodeUnitzW_9Generator7Element_rfTMx5inputq_24repairIllFormedSequencesSb15minimumCapacitySi_TGSqS__8hadErrorSb_ : $@convention(thin) (@in UnsafeBufferPointer<UInt8>, Bool, Int) -> @owned (Optional<_StringBuffer>, hadError: Bool) {
// %0                                             // users: %3, %6, %8
// %1                                             // users: %4, %13, %74, %275
// %2                                             // users: %5, %91
bb0(%0 : $*UnsafeBufferPointer<UInt8>, %1 : $Bool, %2 : $Int):
  debug_value_addr %0 : $*UnsafeBufferPointer<UInt8> // id: %3
  debug_value %1 : $Bool                          // id: %4
  debug_value %2 : $Int                           // id: %5
  %6 = struct_element_addr %0 : $*UnsafeBufferPointer<UInt8>, #UnsafeBufferPointer._position // users: %7, %162, %272
  %7 = load %6 : $*UnsafePointer<UInt8>           // user: %10
  %8 = struct_element_addr %0 : $*UnsafeBufferPointer<UInt8>, #UnsafeBufferPointer._end // users: %9, %163, %273
  %9 = load %8 : $*UnsafePointer<UInt8>           // user: %10
  %10 = struct $UnsafeBufferPointerGenerator<UInt8> (%7 : $UnsafePointer<UInt8>, %9 : $UnsafePointer<UInt8>) // user: %14
  %11 = alloc_stack $UnsafeBufferPointerGenerator<UInt8> // users: %14, %27, %72
  %12 = alloc_stack $UTF8                         // users: %22, %27, %71
  debug_value %1 : $Bool                          // id: %13
  store %10 to %11 : $*UnsafeBufferPointerGenerator<UInt8> // id: %14
  %15 = integer_literal $Builtin.Int64, 0         // user: %24
  %16 = integer_literal $Builtin.Int1, -1         // users: %24, %50, %78, %117, %132, %139, %215, %227, %242, %249, %336, %353, %369, %377, %382
  %17 = integer_literal $Builtin.Int32, 0         // user: %18
  %18 = struct $UInt32 (%17 : $Builtin.Int32)     // user: %21
  %19 = integer_literal $Builtin.Int8, 0          // user: %20
  %20 = struct $UInt8 (%19 : $Builtin.Int8)       // users: %21, %21
  %21 = struct $UTF8 (%18 : $UInt32, %20 : $UInt8, %20 : $UInt8) // users: %22, %168, %279
  store %21 to %12 : $*UTF8                       // id: %22
  // function_ref generic specialization <Swift.UnsafeBufferPointerGenerator<Swift.UInt8> with Swift.UnsafeBufferPointerGenerator<Swift.UInt8> : Swift.GeneratorType in Swift> of Swift.UTF8.decode <A where A: Swift.GeneratorType, A.Element == Swift.UInt8> (inout A) -> Swift.UnicodeDecodingResult
  %23 = function_ref @_TTSg5GVs28UnsafeBufferPointerGeneratorVs5UInt8_GS_S0__s13GeneratorTypes___TFVs4UTF86decodeuRxs13GeneratorTypewx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult : $@convention(method) (@inout UnsafeBufferPointerGenerator<UInt8>, @inout UTF8) -> UnicodeDecodingResult // users: %27, %169, %212, %280, %331
  br bb1(%15 : $Builtin.Int64, %16 : $Builtin.Int1) // id: %24

// %25                                            // users: %50, %65, %78
// %26                                            // users: %63, %64, %66
bb1(%25 : $Builtin.Int64, %26 : $Builtin.Int1):   // Preds: bb0 bb7 bb15
  %27 = apply %23(%11, %12) : $@convention(method) (@inout UnsafeBufferPointerGenerator<UInt8>, @inout UTF8) -> UnicodeDecodingResult // user: %28
  switch_enum %27 : $UnicodeDecodingResult, case #UnicodeDecodingResult.Result!enumelt.1: bb2, case #UnicodeDecodingResult.EmptyInput!enumelt: bb12, case #UnicodeDecodingResult.Error!enumelt: bb14 // id: %28

// %29                                            // users: %30, %31, %32, %38, %39, %58, %59
bb2(%29 : $UnicodeScalar):                        // Preds: bb1
  debug_value %29 : $UnicodeScalar                // id: %30
  debug_value %29 : $UnicodeScalar                // id: %31
  %32 = struct_extract %29 : $UnicodeScalar, #UnicodeScalar._value // user: %34
  %33 = integer_literal $Builtin.Int32, 127       // user: %35
  %34 = struct_extract %32 : $UInt32, #UInt32._value // users: %35, %41, %61
  %35 = builtin "cmp_ugt_Int32"(%34 : $Builtin.Int32, %33 : $Builtin.Int32) : $Builtin.Int1 // user: %36
  cond_br %35, bb3, bb9                           // id: %36

bb3:                                              // Preds: bb2
  %37 = integer_literal $Builtin.Int1, 0          // users: %43, %44
  debug_value %29 : $UnicodeScalar                // id: %38
  debug_value %29 : $UnicodeScalar                // id: %39
  %40 = integer_literal $Builtin.Int32, 65535     // user: %41
  %41 = builtin "cmp_ule_Int32"(%34 : $Builtin.Int32, %40 : $Builtin.Int32) : $Builtin.Int1 // user: %42
  cond_br %41, bb5, bb4                           // id: %42

bb4:                                              // Preds: bb3
  br bb8(%37 : $Builtin.Int1)                     // id: %43

bb5:                                              // Preds: bb3
  br bb6(%37 : $Builtin.Int1)                     // id: %44

// %45                                            // user: %47
bb6(%45 : $Builtin.Int1):                         // Preds: bb5 bb11
  %46 = integer_literal $Builtin.Int64, 1         // user: %47
  br bb7(%46 : $Builtin.Int64, %45 : $Builtin.Int1) // id: %47

// %48                                            // user: %50
// %49                                            // user: %54
bb7(%48 : $Builtin.Int64, %49 : $Builtin.Int1):   // Preds: bb6 bb8
  %50 = builtin "sadd_with_overflow_Int64"(%25 : $Builtin.Int64, %48 : $Builtin.Int64, %16 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %51, %52
  %51 = tuple_extract %50 : $(Builtin.Int64, Builtin.Int1), 0 // user: %54
  %52 = tuple_extract %50 : $(Builtin.Int64, Builtin.Int1), 1 // user: %53
  cond_fail %52 : $Builtin.Int1                   // id: %53
  br bb1(%51 : $Builtin.Int64, %49 : $Builtin.Int1) // id: %54

// %55                                            // user: %57
bb8(%55 : $Builtin.Int1):                         // Preds: bb4 bb10
  %56 = integer_literal $Builtin.Int64, 2         // user: %57
  br bb7(%56 : $Builtin.Int64, %55 : $Builtin.Int1) // id: %57

bb9:                                              // Preds: bb2
  debug_value %29 : $UnicodeScalar                // id: %58
  debug_value %29 : $UnicodeScalar                // id: %59
  %60 = integer_literal $Builtin.Int32, 65535     // user: %61
  %61 = builtin "cmp_ule_Int32"(%34 : $Builtin.Int32, %60 : $Builtin.Int32) : $Builtin.Int1 // user: %62
  cond_br %61, bb11, bb10                         // id: %62

bb10:                                             // Preds: bb9
  br bb8(%26 : $Builtin.Int1)                     // id: %63

bb11:                                             // Preds: bb9
  br bb6(%26 : $Builtin.Int1)                     // id: %64

bb12:                                             // Preds: bb1
  %65 = struct $Int (%25 : $Builtin.Int64)        // user: %67
  %66 = struct $Bool (%26 : $Builtin.Int1)        // user: %67
  %67 = tuple (%65 : $Int, %66 : $Bool)           // user: %68
  %68 = enum $Optional<(Int, Bool)>, #Optional.Some!enumelt.1, %67 : $(Int, Bool) // user: %69
  br bb13(%68 : $Optional<(Int, Bool)>)           // id: %69

// %70                                            // user: %73
bb13(%70 : $Optional<(Int, Bool)>):               // Preds: bb12 bb16
  dealloc_stack %12 : $*UTF8                      // id: %71
  dealloc_stack %11 : $*UnsafeBufferPointerGenerator<UInt8> // id: %72
  switch_enum %70 : $Optional<(Int, Bool)>, case #Optional.Some!enumelt.1: bb17, case #Optional.None!enumelt: bb53 // id: %73

bb14:                                             // Preds: bb1
  %74 = struct_extract %1 : $Bool, #Bool._value   // user: %75
  cond_br %74, bb15, bb16                         // id: %75

bb15:                                             // Preds: bb14
  %76 = integer_literal $Builtin.Int1, 0          // user: %82
  %77 = integer_literal $Builtin.Int64, 1         // user: %78
  %78 = builtin "sadd_with_overflow_Int64"(%25 : $Builtin.Int64, %77 : $Builtin.Int64, %16 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %79, %80
  %79 = tuple_extract %78 : $(Builtin.Int64, Builtin.Int1), 0 // user: %82
  %80 = tuple_extract %78 : $(Builtin.Int64, Builtin.Int1), 1 // user: %81
  cond_fail %80 : $Builtin.Int1                   // id: %81
  br bb1(%79 : $Builtin.Int64, %76 : $Builtin.Int1) // id: %82

bb16:                                             // Preds: bb14
  %83 = enum $Optional<(Int, Bool)>, #Optional.None!enumelt // user: %84
  br bb13(%83 : $Optional<(Int, Bool)>)           // id: %84

// %85                                            // users: %86, %88
bb17(%85 : $(Int, Bool)):                         // Preds: bb13
  %86 = tuple_extract %85 : $(Int, Bool), 0       // users: %87, %90, %105
  debug_value %86 : $Int                          // id: %87
  %88 = tuple_extract %85 : $(Int, Bool), 1       // users: %89, %97
  debug_value %88 : $Bool                         // id: %89
  %90 = struct_extract %86 : $Int, #Int._value    // users: %92, %95
  %91 = struct_extract %2 : $Int, #Int._value     // users: %92, %94
  %92 = builtin "cmp_sge_Int64"(%91 : $Builtin.Int64, %90 : $Builtin.Int64) : $Builtin.Int1 // user: %93
  cond_br %92, bb18, bb19                         // id: %93

bb18:                                             // Preds: bb17
  br bb20(%91 : $Builtin.Int64)                   // id: %94

bb19:                                             // Preds: bb17
  br bb20(%90 : $Builtin.Int64)                   // id: %95

// %96                                            // user: %102
bb20(%96 : $Builtin.Int64):                       // Preds: bb18 bb19
  %97 = struct_extract %88 : $Bool, #Bool._value  // users: %98, %107
  cond_br %97, bb21, bb52                         // id: %98

bb21:                                             // Preds: bb20
  %99 = integer_literal $Builtin.Int64, 1         // user: %100
  br bb22(%99 : $Builtin.Int64)                   // id: %100

// %101                                           // user: %103
bb22(%101 : $Builtin.Int64):                      // Preds: bb21 bb52
  %102 = struct $Int (%96 : $Builtin.Int64)       // user: %105
  %103 = struct $Int (%101 : $Builtin.Int64)      // user: %105
  // function_ref function signature specialization <Arg[3] = Dead> of Swift._StringBuffer.init (capacity : Swift.Int, initialSize : Swift.Int, elementWidth : Swift.Int) -> Swift._StringBuffer
  %104 = function_ref @_TTSf4n_n_n_d___TFVs13_StringBufferCfT8capacitySi11initialSizeSi12elementWidthSi_S_ : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer // user: %105
  %105 = apply %104(%102, %86, %103) : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer // users: %106, %108, %109, %191, %219, %302
  debug_value %105 : $_StringBuffer               // id: %106
  cond_br %97, bb23, bb35                         // id: %107

bb23:                                             // Preds: bb22
  debug_value %105 : $_StringBuffer               // id: %108
  %109 = struct_extract %105 : $_StringBuffer, #_StringBuffer._storage // users: %110, %142, %143, %144
  debug_value %109 : $_HeapBuffer<_StringBufferIVars, UInt16> // id: %110
  %111 = metatype $@thick HeapObject.Type         // user: %112
  %112 = builtin "sizeof"<HeapObject>(%111 : $@thick HeapObject.Type) : $Builtin.Word // user: %113
  %113 = builtin "zextOrBitCast_Word_Int64"(%112 : $Builtin.Word) : $Builtin.Int64 // user: %117
  %114 = metatype $@thick _StringBufferIVars.Type // users: %115, %130
  %115 = builtin "alignof"<_StringBufferIVars>(%114 : $@thick _StringBufferIVars.Type) : $Builtin.Word // user: %116
  %116 = builtin "zextOrBitCast_Word_Int64"(%115 : $Builtin.Word) : $Builtin.Int64 // users: %117, %125
  %117 = builtin "sadd_with_overflow_Int64"(%113 : $Builtin.Int64, %116 : $Builtin.Int64, %16 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %118, %119
  %118 = tuple_extract %117 : $(Builtin.Int64, Builtin.Int1), 0 // user: %123
  %119 = tuple_extract %117 : $(Builtin.Int64, Builtin.Int1), 1 // user: %120
  cond_fail %119 : $Builtin.Int1                  // id: %120
  %121 = integer_literal $Builtin.Int64, 1        // users: %123, %125, %147, %149
  %122 = integer_literal $Builtin.Int1, 0         // users: %123, %125, %147, %149, %158, %170
  %123 = builtin "ssub_with_overflow_Int64"(%118 : $Builtin.Int64, %121 : $Builtin.Int64, %122 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %124
  %124 = tuple_extract %123 : $(Builtin.Int64, Builtin.Int1), 0 // user: %129
  %125 = builtin "ssub_with_overflow_Int64"(%116 : $Builtin.Int64, %121 : $Builtin.Int64, %122 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %126
  %126 = tuple_extract %125 : $(Builtin.Int64, Builtin.Int1), 0 // user: %128
  %127 = integer_literal $Builtin.Int64, -1       // users: %128, %151
  %128 = builtin "xor_Int64"(%126 : $Builtin.Int64, %127 : $Builtin.Int64) : $Builtin.Int64 // user: %129
  %129 = builtin "and_Int64"(%124 : $Builtin.Int64, %128 : $Builtin.Int64) : $Builtin.Int64 // user: %132
  %130 = builtin "sizeof"<_StringBufferIVars>(%114 : $@thick _StringBufferIVars.Type) : $Builtin.Word // user: %131
  %131 = builtin "zextOrBitCast_Word_Int64"(%130 : $Builtin.Word) : $Builtin.Int64 // user: %132
  %132 = builtin "sadd_with_overflow_Int64"(%129 : $Builtin.Int64, %131 : $Builtin.Int64, %16 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %133, %134
  %133 = tuple_extract %132 : $(Builtin.Int64, Builtin.Int1), 0 // user: %139
  %134 = tuple_extract %132 : $(Builtin.Int64, Builtin.Int1), 1 // user: %135
  cond_fail %134 : $Builtin.Int1                  // id: %135
  %136 = metatype $@thick UInt16.Type             // user: %137
  %137 = builtin "alignof"<UInt16>(%136 : $@thick UInt16.Type) : $Builtin.Word // user: %138
  %138 = builtin "zextOrBitCast_Word_Int64"(%137 : $Builtin.Word) : $Builtin.Int64 // users: %139, %149
  %139 = builtin "sadd_with_overflow_Int64"(%133 : $Builtin.Int64, %138 : $Builtin.Int64, %16 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %140, %146
  %140 = tuple_extract %139 : $(Builtin.Int64, Builtin.Int1), 1 // user: %141
  cond_fail %140 : $Builtin.Int1                  // id: %141
  debug_value %109 : $_HeapBuffer<_StringBufferIVars, UInt16> // id: %142
  debug_value %109 : $_HeapBuffer<_StringBufferIVars, UInt16> // id: %143
  %144 = struct_extract %109 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage // users: %145, %153
  switch_enum %144 : $Optional<Builtin.NativeObject>, case #Optional.Some!enumelt.1: bb24, case #Optional.None!enumelt: bb25 // id: %145

bb24:                                             // Preds: bb23
  %146 = tuple_extract %139 : $(Builtin.Int64, Builtin.Int1), 0 // user: %147
  %147 = builtin "ssub_with_overflow_Int64"(%146 : $Builtin.Int64, %121 : $Builtin.Int64, %122 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %148
  %148 = tuple_extract %147 : $(Builtin.Int64, Builtin.Int1), 0 // user: %152
  %149 = builtin "ssub_with_overflow_Int64"(%138 : $Builtin.Int64, %121 : $Builtin.Int64, %122 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %150
  %150 = tuple_extract %149 : $(Builtin.Int64, Builtin.Int1), 0 // user: %151
  %151 = builtin "xor_Int64"(%150 : $Builtin.Int64, %127 : $Builtin.Int64) : $Builtin.Int64 // user: %152
  %152 = builtin "and_Int64"(%148 : $Builtin.Int64, %151 : $Builtin.Int64) : $Builtin.Int64 // user: %158
  %153 = unchecked_enum_data %144 : $Optional<Builtin.NativeObject>, #Optional.Some!enumelt.1 // user: %154
  %154 = ref_to_raw_pointer %153 : $Builtin.NativeObject to $Builtin.RawPointer // user: %161
  %155 = metatype $@thick Int8.Type               // user: %156
  %156 = builtin "strideof_nonzero"<Int8>(%155 : $@thick Int8.Type) : $Builtin.Word // user: %157
  %157 = builtin "zextOrBitCast_Word_Int64"(%156 : $Builtin.Word) : $Builtin.Int64 // user: %158
  %158 = builtin "smul_with_overflow_Int64"(%152 : $Builtin.Int64, %157 : $Builtin.Int64, %122 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %159
  %159 = tuple_extract %158 : $(Builtin.Int64, Builtin.Int1), 0 // user: %160
  %160 = builtin "truncOrBitCast_Int64_Word"(%159 : $Builtin.Int64) : $Builtin.Word // user: %161
  %161 = index_raw_pointer %154 : $Builtin.RawPointer, %160 : $Builtin.Word // user: %170
  %162 = load %6 : $*UnsafePointer<UInt8>         // user: %164
  %163 = load %8 : $*UnsafePointer<UInt8>         // user: %164
  %164 = struct $UnsafeBufferPointerGenerator<UInt8> (%162 : $UnsafePointer<UInt8>, %163 : $UnsafePointer<UInt8>) // user: %167
  %165 = alloc_stack $UnsafeBufferPointerGenerator<UInt8> // users: %167, %169, %189, %212
  %166 = alloc_stack $UTF8                        // users: %168, %169, %188, %212
  store %164 to %165 : $*UnsafeBufferPointerGenerator<UInt8> // id: %167
  store %21 to %166 : $*UTF8                      // id: %168
  %169 = apply %23(%165, %166) : $@convention(method) (@inout UnsafeBufferPointerGenerator<UInt8>, @inout UTF8) -> UnicodeDecodingResult // user: %170
  br bb27(%122 : $Builtin.Int1, %169 : $UnicodeDecodingResult, %161 : $Builtin.RawPointer) // id: %170

bb25:                                             // Preds: bb23
  br bb26                                         // id: %171

bb26:                                             // Preds: bb25
  %172 = string_literal utf8 "unexpectedly found nil while unwrapping an Optional value" // user: %178
  %173 = integer_literal $Builtin.Word, 57        // user: %178
  %174 = integer_literal $Builtin.Int8, 2         // users: %178, %178
  %175 = string_literal utf8 "fatal error"        // user: %178
  %176 = integer_literal $Builtin.Word, 11        // user: %178
  // function_ref function signature specialization <Arg[0] = Exploded, Arg[1] = Exploded, Arg[2] = Dead, Arg[3] = Dead> of Swift._fatalErrorMessage (Swift.StaticString, Swift.StaticString, Swift.StaticString, Swift.UInt) -> ()
  %177 = function_ref @_TTSf4s_s_d_d___TFs18_fatalErrorMessageFTVs12StaticStringS_S_Su_T_ : $@convention(thin) @noreturn (Builtin.RawPointer, Builtin.Word, Builtin.Int8, Builtin.RawPointer, Builtin.Word, Builtin.Int8) -> () // user: %178
  %178 = apply %177(%175, %176, %174, %172, %173, %174) : $@convention(thin) @noreturn (Builtin.RawPointer, Builtin.Word, Builtin.Int8, Builtin.RawPointer, Builtin.Word, Builtin.Int8) -> ()
  unreachable                                     // id: %179

// %180                                           // users: %185, %213
// %181                                           // users: %183, %184, %216
// %182                                           // users: %207, %211
bb27(%180 : $Builtin.Int1, %181 : $UnicodeDecodingResult, %182 : $Builtin.RawPointer): // Preds: bb24 bb30
  debug_value %181 : $UnicodeDecodingResult       // id: %183
  switch_enum %181 : $UnicodeDecodingResult, case #UnicodeDecodingResult.EmptyInput!enumelt: bb28, default bb33 // id: %184

bb28:                                             // Preds: bb27
  br bb29(%180 : $Builtin.Int1)                   // id: %185

// %186                                           // user: %187
bb29(%186 : $Builtin.Int1):                       // Preds: bb28 bb32
  %187 = struct $Bool (%186 : $Builtin.Int1)      // users: %190, %192
  dealloc_stack %166 : $*UTF8                     // id: %188
  dealloc_stack %165 : $*UnsafeBufferPointerGenerator<UInt8> // id: %189
  debug_value %187 : $Bool                        // id: %190
  %191 = enum $Optional<_StringBuffer>, #Optional.Some!enumelt.1, %105 : $_StringBuffer // user: %192
  %192 = tuple $(Optional<_StringBuffer>, hadError: Bool) (%191, %187) // user: %193
  br bb34(%192 : $(Optional<_StringBuffer>, hadError: Bool)) // id: %193

// %194                                           // users: %195, %196, %197, %198, %199
bb30(%194 : $UnicodeScalar):                      // Preds: bb33
  debug_value %194 : $UnicodeScalar               // id: %195
  debug_value %194 : $UnicodeScalar               // id: %196
  debug_value %194 : $UnicodeScalar               // id: %197
  debug_value %194 : $UnicodeScalar               // id: %198
  %199 = struct_extract %194 : $UnicodeScalar, #UnicodeScalar._value // users: %200, %201
  debug_value %199 : $UInt32                      // id: %200
  %201 = struct_extract %199 : $UInt32, #UInt32._value // user: %202
  %202 = builtin "u_to_u_checked_trunc_Int32_Int8"(%201 : $Builtin.Int32) : $(Builtin.Int8, Builtin.Int1) // users: %203, %205
  %203 = tuple_extract %202 : $(Builtin.Int8, Builtin.Int1), 1 // user: %204
  cond_fail %203 : $Builtin.Int1                  // id: %204
  %205 = tuple_extract %202 : $(Builtin.Int8, Builtin.Int1), 0 // user: %206
  %206 = struct $UInt8 (%205 : $Builtin.Int8)     // user: %208
  %207 = pointer_to_address %182 : $Builtin.RawPointer to $*UInt8 // user: %208
  store %206 to %207 : $*UInt8                    // id: %208
  %209 = metatype $@thick UInt8.Type              // user: %210
  %210 = builtin "strideof_nonzero"<UInt8>(%209 : $@thick UInt8.Type) : $Builtin.Word // user: %211
  %211 = index_raw_pointer %182 : $Builtin.RawPointer, %210 : $Builtin.Word // user: %213
  %212 = apply %23(%165, %166) : $@convention(method) (@inout UnsafeBufferPointerGenerator<UInt8>, @inout UTF8) -> UnicodeDecodingResult // user: %213
  br bb27(%180 : $Builtin.Int1, %212 : $UnicodeDecodingResult, %211 : $Builtin.RawPointer) // id: %213

bb31:                                             // Preds: bb33
  unreachable                                     // id: %214

bb32:                                             // Preds: bb33
  br bb29(%16 : $Builtin.Int1)                    // id: %215

bb33:                                             // Preds: bb27
  switch_enum %181 : $UnicodeDecodingResult, case #UnicodeDecodingResult.Result!enumelt.1: bb30, case #UnicodeDecodingResult.EmptyInput!enumelt: bb31, case #UnicodeDecodingResult.Error!enumelt: bb32 // id: %216

// %217                                           // user: %218
bb34(%217 : $(Optional<_StringBuffer>, hadError: Bool)): // Preds: bb29 bb41 bb53
  return %217 : $(Optional<_StringBuffer>, hadError: Bool) // id: %218

bb35:                                             // Preds: bb22
  %219 = struct_extract %105 : $_StringBuffer, #_StringBuffer._storage // users: %220, %252, %253, %254
  debug_value %219 : $_HeapBuffer<_StringBufferIVars, UInt16> // id: %220
  %221 = metatype $@thick HeapObject.Type         // user: %222
  %222 = builtin "sizeof"<HeapObject>(%221 : $@thick HeapObject.Type) : $Builtin.Word // user: %223
  %223 = builtin "zextOrBitCast_Word_Int64"(%222 : $Builtin.Word) : $Builtin.Int64 // user: %227
  %224 = metatype $@thick _StringBufferIVars.Type // users: %225, %240
  %225 = builtin "alignof"<_StringBufferIVars>(%224 : $@thick _StringBufferIVars.Type) : $Builtin.Word // user: %226
  %226 = builtin "zextOrBitCast_Word_Int64"(%225 : $Builtin.Word) : $Builtin.Int64 // users: %227, %235
  %227 = builtin "sadd_with_overflow_Int64"(%223 : $Builtin.Int64, %226 : $Builtin.Int64, %16 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %228, %229
  %228 = tuple_extract %227 : $(Builtin.Int64, Builtin.Int1), 0 // user: %233
  %229 = tuple_extract %227 : $(Builtin.Int64, Builtin.Int1), 1 // user: %230
  cond_fail %229 : $Builtin.Int1                  // id: %230
  %231 = integer_literal $Builtin.Int64, 1        // users: %233, %235, %257, %259
  %232 = integer_literal $Builtin.Int1, 0         // users: %233, %235, %257, %259, %268, %281
  %233 = builtin "ssub_with_overflow_Int64"(%228 : $Builtin.Int64, %231 : $Builtin.Int64, %232 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %234
  %234 = tuple_extract %233 : $(Builtin.Int64, Builtin.Int1), 0 // user: %239
  %235 = builtin "ssub_with_overflow_Int64"(%226 : $Builtin.Int64, %231 : $Builtin.Int64, %232 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %236
  %236 = tuple_extract %235 : $(Builtin.Int64, Builtin.Int1), 0 // user: %238
  %237 = integer_literal $Builtin.Int64, -1       // users: %238, %261
  %238 = builtin "xor_Int64"(%236 : $Builtin.Int64, %237 : $Builtin.Int64) : $Builtin.Int64 // user: %239
  %239 = builtin "and_Int64"(%234 : $Builtin.Int64, %238 : $Builtin.Int64) : $Builtin.Int64 // user: %242
  %240 = builtin "sizeof"<_StringBufferIVars>(%224 : $@thick _StringBufferIVars.Type) : $Builtin.Word // user: %241
  %241 = builtin "zextOrBitCast_Word_Int64"(%240 : $Builtin.Word) : $Builtin.Int64 // user: %242
  %242 = builtin "sadd_with_overflow_Int64"(%239 : $Builtin.Int64, %241 : $Builtin.Int64, %16 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %243, %244
  %243 = tuple_extract %242 : $(Builtin.Int64, Builtin.Int1), 0 // user: %249
  %244 = tuple_extract %242 : $(Builtin.Int64, Builtin.Int1), 1 // user: %245
  cond_fail %244 : $Builtin.Int1                  // id: %245
  %246 = metatype $@thick UInt16.Type             // users: %247, %324, %348, %375
  %247 = builtin "alignof"<UInt16>(%246 : $@thick UInt16.Type) : $Builtin.Word // user: %248
  %248 = builtin "zextOrBitCast_Word_Int64"(%247 : $Builtin.Word) : $Builtin.Int64 // users: %249, %259
  %249 = builtin "sadd_with_overflow_Int64"(%243 : $Builtin.Int64, %248 : $Builtin.Int64, %16 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %250, %256
  %250 = tuple_extract %249 : $(Builtin.Int64, Builtin.Int1), 1 // user: %251
  cond_fail %250 : $Builtin.Int1                  // id: %251
  debug_value %219 : $_HeapBuffer<_StringBufferIVars, UInt16> // id: %252
  debug_value %219 : $_HeapBuffer<_StringBufferIVars, UInt16> // id: %253
  %254 = struct_extract %219 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage // users: %255, %263
  switch_enum %254 : $Optional<Builtin.NativeObject>, case #Optional.Some!enumelt.1: bb36, case #Optional.None!enumelt: bb37 // id: %255

bb36:                                             // Preds: bb35
  %256 = tuple_extract %249 : $(Builtin.Int64, Builtin.Int1), 0 // user: %257
  %257 = builtin "ssub_with_overflow_Int64"(%256 : $Builtin.Int64, %231 : $Builtin.Int64, %232 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %258
  %258 = tuple_extract %257 : $(Builtin.Int64, Builtin.Int1), 0 // user: %262
  %259 = builtin "ssub_with_overflow_Int64"(%248 : $Builtin.Int64, %231 : $Builtin.Int64, %232 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %260
  %260 = tuple_extract %259 : $(Builtin.Int64, Builtin.Int1), 0 // user: %261
  %261 = builtin "xor_Int64"(%260 : $Builtin.Int64, %237 : $Builtin.Int64) : $Builtin.Int64 // user: %262
  %262 = builtin "and_Int64"(%258 : $Builtin.Int64, %261 : $Builtin.Int64) : $Builtin.Int64 // user: %268
  %263 = unchecked_enum_data %254 : $Optional<Builtin.NativeObject>, #Optional.Some!enumelt.1 // user: %264
  %264 = ref_to_raw_pointer %263 : $Builtin.NativeObject to $Builtin.RawPointer // user: %271
  %265 = metatype $@thick Int8.Type               // user: %266
  %266 = builtin "strideof_nonzero"<Int8>(%265 : $@thick Int8.Type) : $Builtin.Word // user: %267
  %267 = builtin "zextOrBitCast_Word_Int64"(%266 : $Builtin.Word) : $Builtin.Int64 // user: %268
  %268 = builtin "smul_with_overflow_Int64"(%262 : $Builtin.Int64, %267 : $Builtin.Int64, %232 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %269
  %269 = tuple_extract %268 : $(Builtin.Int64, Builtin.Int1), 0 // user: %270
  %270 = builtin "truncOrBitCast_Int64_Word"(%269 : $Builtin.Int64) : $Builtin.Word // user: %271
  %271 = index_raw_pointer %264 : $Builtin.RawPointer, %270 : $Builtin.Word // user: %281
  %272 = load %6 : $*UnsafePointer<UInt8>         // user: %274
  %273 = load %8 : $*UnsafePointer<UInt8>         // user: %274
  %274 = struct $UnsafeBufferPointerGenerator<UInt8> (%272 : $UnsafePointer<UInt8>, %273 : $UnsafePointer<UInt8>) // user: %278
  %275 = struct_extract %1 : $Bool, #Bool._value  // user: %368
  %276 = alloc_stack $UnsafeBufferPointerGenerator<UInt8> // users: %278, %280, %300, %331
  %277 = alloc_stack $UTF8                        // users: %279, %280, %299, %331
  store %274 to %276 : $*UnsafeBufferPointerGenerator<UInt8> // id: %278
  store %21 to %277 : $*UTF8                      // id: %279
  %280 = apply %23(%276, %277) : $@convention(method) (@inout UnsafeBufferPointerGenerator<UInt8>, @inout UTF8) -> UnicodeDecodingResult // user: %281
  br bb39(%232 : $Builtin.Int1, %280 : $UnicodeDecodingResult, %271 : $Builtin.RawPointer) // id: %281

bb37:                                             // Preds: bb35
  br bb38                                         // id: %282

bb38:                                             // Preds: bb37
  %283 = string_literal utf8 "unexpectedly found nil while unwrapping an Optional value" // user: %289
  %284 = integer_literal $Builtin.Word, 57        // user: %289
  %285 = integer_literal $Builtin.Int8, 2         // users: %289, %289
  %286 = string_literal utf8 "fatal error"        // user: %289
  %287 = integer_literal $Builtin.Word, 11        // user: %289
  // function_ref function signature specialization <Arg[0] = Exploded, Arg[1] = Exploded, Arg[2] = Dead, Arg[3] = Dead> of Swift._fatalErrorMessage (Swift.StaticString, Swift.StaticString, Swift.StaticString, Swift.UInt) -> ()
  %288 = function_ref @_TTSf4s_s_d_d___TFs18_fatalErrorMessageFTVs12StaticStringS_S_Su_T_ : $@convention(thin) @noreturn (Builtin.RawPointer, Builtin.Word, Builtin.Int8, Builtin.RawPointer, Builtin.Word, Builtin.Int8) -> () // user: %289
  %289 = apply %288(%286, %287, %285, %283, %284, %285) : $@convention(thin) @noreturn (Builtin.RawPointer, Builtin.Word, Builtin.Int8, Builtin.RawPointer, Builtin.Word, Builtin.Int8) -> ()
  unreachable                                     // id: %290

// %291                                           // users: %296, %328
// %292                                           // users: %294, %295, %378
// %293                                           // users: %322, %325, %346, %349, %373, %376
bb39(%291 : $Builtin.Int1, %292 : $UnicodeDecodingResult, %293 : $Builtin.RawPointer): // Preds: bb36 bb45
  debug_value %292 : $UnicodeDecodingResult       // id: %294
  switch_enum %292 : $UnicodeDecodingResult, case #UnicodeDecodingResult.EmptyInput!enumelt: bb40, default bb51 // id: %295

bb40:                                             // Preds: bb39
  br bb41(%291 : $Builtin.Int1)                   // id: %296

// %297                                           // user: %298
bb41(%297 : $Builtin.Int1):                       // Preds: bb40 bb49
  %298 = struct $Bool (%297 : $Builtin.Int1)      // users: %301, %303
  dealloc_stack %277 : $*UTF8                     // id: %299
  dealloc_stack %276 : $*UnsafeBufferPointerGenerator<UInt8> // id: %300
  debug_value %298 : $Bool                        // id: %301
  %302 = enum $Optional<_StringBuffer>, #Optional.Some!enumelt.1, %105 : $_StringBuffer // user: %303
  %303 = tuple $(Optional<_StringBuffer>, hadError: Bool) (%302, %298) // user: %304
  br bb34(%303 : $(Optional<_StringBuffer>, hadError: Bool)) // id: %304

// %305                                           // users: %306, %307, %308, %309, %310
bb42(%305 : $UnicodeScalar):                      // Preds: bb51
  debug_value %305 : $UnicodeScalar               // id: %306
  debug_value %305 : $UnicodeScalar               // id: %307
  debug_value %305 : $UnicodeScalar               // id: %308
  debug_value %305 : $UnicodeScalar               // id: %309
  %310 = struct_extract %305 : $UnicodeScalar, #UnicodeScalar._value // users: %311, %313
  debug_value %310 : $UInt32                      // id: %311
  %312 = integer_literal $Builtin.Int32, 65535    // user: %314
  %313 = struct_extract %310 : $UInt32, #UInt32._value // users: %314, %316, %335, %352
  %314 = builtin "cmp_ule_Int32"(%313 : $Builtin.Int32, %312 : $Builtin.Int32) : $Builtin.Int1 // user: %315
  cond_br %314, bb43, bb46                        // id: %315

bb43:                                             // Preds: bb42
  %316 = builtin "u_to_u_checked_trunc_Int32_Int16"(%313 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1) // users: %317, %319
  %317 = tuple_extract %316 : $(Builtin.Int16, Builtin.Int1), 1 // user: %318
  cond_fail %317 : $Builtin.Int1                  // id: %318
  %319 = tuple_extract %316 : $(Builtin.Int16, Builtin.Int1), 0 // user: %320
  %320 = struct $UInt16 (%319 : $Builtin.Int16)   // users: %321, %323
  debug_value %320 : $UInt16                      // id: %321
  %322 = pointer_to_address %293 : $Builtin.RawPointer to $*UInt16 // user: %323
  store %320 to %322 : $*UInt16                   // id: %323
  %324 = builtin "strideof_nonzero"<UInt16>(%246 : $@thick UInt16.Type) : $Builtin.Word // user: %325
  %325 = index_raw_pointer %293 : $Builtin.RawPointer, %324 : $Builtin.Word // user: %326
  br bb44(%325 : $Builtin.RawPointer)             // id: %326

// %327                                           // user: %328
bb44(%327 : $Builtin.RawPointer):                 // Preds: bb43 bb46
  br bb45(%291 : $Builtin.Int1, %327 : $Builtin.RawPointer) // id: %328

// %329                                           // user: %332
// %330                                           // user: %332
bb45(%329 : $Builtin.Int1, %330 : $Builtin.RawPointer): // Preds: bb44 bb50
  %331 = apply %23(%276, %277) : $@convention(method) (@inout UnsafeBufferPointerGenerator<UInt8>, @inout UTF8) -> UnicodeDecodingResult // user: %332
  br bb39(%329 : $Builtin.Int1, %331 : $UnicodeDecodingResult, %330 : $Builtin.RawPointer) // id: %332

bb46:                                             // Preds: bb42
  %333 = integer_literal $Builtin.Int32, 55232    // user: %336
  %334 = integer_literal $Builtin.Int32, 10       // user: %335
  %335 = builtin "lshr_Int32"(%313 : $Builtin.Int32, %334 : $Builtin.Int32) : $Builtin.Int32 // user: %336
  %336 = builtin "uadd_with_overflow_Int32"(%333 : $Builtin.Int32, %335 : $Builtin.Int32, %16 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // users: %337, %338
  %337 = tuple_extract %336 : $(Builtin.Int32, Builtin.Int1), 0 // user: %340
  %338 = tuple_extract %336 : $(Builtin.Int32, Builtin.Int1), 1 // user: %339
  cond_fail %338 : $Builtin.Int1                  // id: %339
  %340 = builtin "u_to_u_checked_trunc_Int32_Int16"(%337 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1) // users: %341, %343
  %341 = tuple_extract %340 : $(Builtin.Int16, Builtin.Int1), 1 // user: %342
  cond_fail %341 : $Builtin.Int1                  // id: %342
  %343 = tuple_extract %340 : $(Builtin.Int16, Builtin.Int1), 0 // user: %344
  %344 = struct $UInt16 (%343 : $Builtin.Int16)   // users: %345, %347
  debug_value %344 : $UInt16                      // id: %345
  %346 = pointer_to_address %293 : $Builtin.RawPointer to $*UInt16 // user: %347
  store %344 to %346 : $*UInt16                   // id: %347
  %348 = builtin "strideof_nonzero"<UInt16>(%246 : $@thick UInt16.Type) : $Builtin.Word // users: %349, %365
  %349 = index_raw_pointer %293 : $Builtin.RawPointer, %348 : $Builtin.Word // users: %363, %365
  %350 = integer_literal $Builtin.Int32, 56320    // user: %353
  %351 = integer_literal $Builtin.Int32, 1023     // user: %352
  %352 = builtin "and_Int32"(%313 : $Builtin.Int32, %351 : $Builtin.Int32) : $Builtin.Int32 // user: %353
  %353 = builtin "uadd_with_overflow_Int32"(%350 : $Builtin.Int32, %352 : $Builtin.Int32, %16 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1) // users: %354, %355
  %354 = tuple_extract %353 : $(Builtin.Int32, Builtin.Int1), 0 // user: %357
  %355 = tuple_extract %353 : $(Builtin.Int32, Builtin.Int1), 1 // user: %356
  cond_fail %355 : $Builtin.Int1                  // id: %356
  %357 = builtin "u_to_u_checked_trunc_Int32_Int16"(%354 : $Builtin.Int32) : $(Builtin.Int16, Builtin.Int1) // users: %358, %360
  %358 = tuple_extract %357 : $(Builtin.Int16, Builtin.Int1), 1 // user: %359
  cond_fail %358 : $Builtin.Int1                  // id: %359
  %360 = tuple_extract %357 : $(Builtin.Int16, Builtin.Int1), 0 // user: %361
  %361 = struct $UInt16 (%360 : $Builtin.Int16)   // users: %362, %364
  debug_value %361 : $UInt16                      // id: %362
  %363 = pointer_to_address %349 : $Builtin.RawPointer to $*UInt16 // user: %364
  store %361 to %363 : $*UInt16                   // id: %364
  %365 = index_raw_pointer %349 : $Builtin.RawPointer, %348 : $Builtin.Word // user: %366
  br bb44(%365 : $Builtin.RawPointer)             // id: %366

bb47:                                             // Preds: bb51
  unreachable                                     // id: %367

bb48:                                             // Preds: bb51
  cond_br %275, bb50, bb49                        // id: %368

bb49:                                             // Preds: bb48
  br bb41(%16 : $Builtin.Int1)                    // id: %369

bb50:                                             // Preds: bb48
  %370 = integer_literal $Builtin.Int16, -3       // user: %371
  %371 = struct $UInt16 (%370 : $Builtin.Int16)   // users: %372, %374
  debug_value %371 : $UInt16                      // id: %372
  %373 = pointer_to_address %293 : $Builtin.RawPointer to $*UInt16 // user: %374
  store %371 to %373 : $*UInt16                   // id: %374
  %375 = builtin "strideof_nonzero"<UInt16>(%246 : $@thick UInt16.Type) : $Builtin.Word // user: %376
  %376 = index_raw_pointer %293 : $Builtin.RawPointer, %375 : $Builtin.Word // user: %377
  br bb45(%16 : $Builtin.Int1, %376 : $Builtin.RawPointer) // id: %377

bb51:                                             // Preds: bb39
  switch_enum %292 : $UnicodeDecodingResult, case #UnicodeDecodingResult.Result!enumelt.1: bb42, case #UnicodeDecodingResult.EmptyInput!enumelt: bb47, case #UnicodeDecodingResult.Error!enumelt: bb48 // id: %378

bb52:                                             // Preds: bb20
  %379 = integer_literal $Builtin.Int64, 2        // user: %380
  br bb22(%379 : $Builtin.Int64)                  // id: %380

bb53:                                             // Preds: bb13
  %381 = enum $Optional<_StringBuffer>, #Optional.None!enumelt // user: %383
  %382 = struct $Bool (%16 : $Builtin.Int1)       // user: %383
  %383 = tuple $(Optional<_StringBuffer>, hadError: Bool) (%381, %382) // user: %384
  br bb34(%383 : $(Optional<_StringBuffer>, hadError: Bool)) // id: %384
}

// generic specialization <Swift.UnsafeBufferPointerGenerator<Swift.UInt8> with Swift.UnsafeBufferPointerGenerator<Swift.UInt8> : Swift.GeneratorType in Swift> of Swift.UTF8.decode <A where A: Swift.GeneratorType, A.Element == Swift.UInt8> (inout A) -> Swift.UnicodeDecodingResult
sil @_TTSg5GVs28UnsafeBufferPointerGeneratorVs5UInt8_GS_S0__s13GeneratorTypes___TFVs4UTF86decodeuRxs13GeneratorTypewx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult : $@convention(method) (@inout UnsafeBufferPointerGenerator<UInt8>, @inout UTF8) -> UnicodeDecodingResult

// function signature specialization <Arg[3] = Dead> of Swift._StringBuffer.init (capacity : Swift.Int, initialSize : Swift.Int, elementWidth : Swift.Int) -> Swift._StringBuffer
sil [fragile] @_TTSf4n_n_n_d___TFVs13_StringBufferCfT8capacitySi11initialSizeSi12elementWidthSi_S_ : $@convention(thin) (Int, Int, Int) -> @owned _StringBuffer

// Swift._print_unlocked <A, B where B: Swift.OutputStreamType> (A, inout B) -> ()
sil [fragile] [noinline] [_semantics "stdlib_binary_only"] @_TFs15_print_unlockedu0_R_s16OutputStreamTyperFTxRq__T_ : $@convention(thin) <τ_0_0, τ_0_1 where τ_0_1 : OutputStreamType> (@in τ_0_0, @inout τ_0_1) -> ()

// Swift._StringCore.(representableAsASCII () -> Swift.Bool).(closure #1)
sil shared_external [fragile] @_TFFVs11_StringCore20representableAsASCIIFT_SbU_FVs6UInt16Sb : $@convention(thin) (UInt16) -> Bool {
// %0                                             // users: %1, %3
bb0(%0 : $UInt16):
  debug_value %0 : $UInt16                        // id: %1
  %2 = integer_literal $Builtin.Int16, 127        // user: %4
  %3 = struct_extract %0 : $UInt16, #UInt16._value // user: %4
  %4 = builtin "cmp_ugt_Int16"(%3 : $Builtin.Int16, %2 : $Builtin.Int16) : $Builtin.Int1 // user: %5
  %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
  return %5 : $Bool                               // id: %6
}

// function signature specialization <Arg[0] = [Closure Propagated : reabstraction thunk helper from @callee_owned (@unowned Swift.UInt16) -> (@unowned Swift.Bool, @error @owned Swift.ErrorType) to @callee_owned (@in Swift.UInt16) -> (@unowned Swift.Bool, @error @owned Swift.ErrorType), Argument Types : [@callee_owned (@unowned Swift.UInt16) -> (@unowned Swift.Bool, @error @owned Swift.ErrorType)]> of generic specialization <Swift.UnsafeBufferPointer<Swift.UInt16> with Swift.UnsafeBufferPointer<Swift.UInt16> : Swift.SequenceType in Swift, Swift.UnsafeBufferPointerGenerator<Swift.UInt16> with Swift.UnsafeBufferPointerGenerator<Swift.UInt16> : Swift.GeneratorType in Swift, Swift.UInt16, Swift.Slice<Swift.UnsafeBufferPointer<Swift.UInt16>>> of (extension in Swift):Swift.SequenceType.contains ((A.Generator.Element) throws -> Swift.Bool) throws -> Swift.Bool
sil shared_external [fragile] @_TTSf1cl57_TTRXFo_dVs6UInt16_dSbzoPs9ErrorType__XFo_iS__dSbzoPS0___XFo_dVs6UInt16_dSbzoPs9ErrorType___n___TTSg5GSRVs6UInt16_GSRS__s12SequenceTypes_GVs28UnsafeBufferPointerGeneratorS__GS1_S__s13GeneratorTypes_S__GVs5SliceGSRS______TFEsPs12SequenceType8containsfzFzWx9Generator7Element_SbSb : $@convention(method) (@in_guaranteed UnsafeBufferPointer<UInt16>, @owned @callee_owned (UInt16) -> (Bool, @error ErrorType)) -> (Bool, @error ErrorType) {
// %0                                             // users: %2, %3, %6
// %1                                             // users: %15, %23, %24, %37
bb0(%0 : $*UnsafeBufferPointer<UInt16>, %1 : $@callee_owned (UInt16) -> (Bool, @error ErrorType)):
  debug_value_addr %0 : $*UnsafeBufferPointer<UInt16> // id: %2
  %3 = struct_element_addr %0 : $*UnsafeBufferPointer<UInt16>, #UnsafeBufferPointer._position // user: %4
  %4 = struct_element_addr %3 : $*UnsafePointer<UInt16>, #UnsafePointer._rawValue // user: %5
  %5 = load %4 : $*Builtin.RawPointer             // users: %9, %19
  %6 = struct_element_addr %0 : $*UnsafeBufferPointer<UInt16>, #UnsafeBufferPointer._end // user: %7
  %7 = struct_element_addr %6 : $*UnsafePointer<UInt16>, #UnsafePointer._rawValue // user: %8
  %8 = load %7 : $*Builtin.RawPointer             // users: %9, %34
  %9 = builtin "cmp_eq_RawPointer"(%5 : $Builtin.RawPointer, %8 : $Builtin.RawPointer) : $Builtin.Int1 // user: %10
  cond_br %9, bb1, bb3                            // id: %10

bb1:                                              // Preds: bb0 bb9
  %11 = integer_literal $Builtin.Int1, 0          // user: %12
  br bb2(%11 : $Builtin.Int1)                     // id: %12

// %13                                            // user: %14
bb2(%13 : $Builtin.Int1):                         // Preds: bb1 bb8
  %14 = struct $Bool (%13 : $Builtin.Int1)        // user: %16
  strong_release %1 : $@callee_owned (UInt16) -> (Bool, @error ErrorType) // id: %15
  return %14 : $Bool                              // id: %16

bb3:                                              // Preds: bb0
  %17 = metatype $@thick UInt16.Type              // user: %18
  %18 = builtin "strideof_nonzero"<UInt16>(%17 : $@thick UInt16.Type) : $Builtin.Word // user: %33
  br bb4(%5 : $Builtin.RawPointer)                // id: %19

// %20                                            // users: %21, %33
bb4(%20 : $Builtin.RawPointer):                   // Preds: bb3 bb10
  %21 = pointer_to_address %20 : $Builtin.RawPointer to $*UInt16 // user: %22
  %22 = load %21 : $*UInt16                       // user: %24
  strong_retain %1 : $@callee_owned (UInt16) -> (Bool, @error ErrorType) // id: %23
  try_apply %1(%22) : $@callee_owned (UInt16) -> (Bool, @error ErrorType), normal bb5, error bb6 // id: %24

// %25                                            // user: %29
bb5(%25 : $Bool):                                 // Preds: bb4
  br bb7                                          // id: %26

// %27                                            // user: %38
bb6(%27 : $ErrorType):                            // Preds: bb4
  br bb11                                         // id: %28

bb7:                                              // Preds: bb5
  %29 = struct_extract %25 : $Bool, #Bool._value  // user: %30
  cond_br %29, bb8, bb9                           // id: %30

bb8:                                              // Preds: bb7
  %31 = integer_literal $Builtin.Int1, -1         // user: %32
  br bb2(%31 : $Builtin.Int1)                     // id: %32

bb9:                                              // Preds: bb7
  %33 = index_raw_pointer %20 : $Builtin.RawPointer, %18 : $Builtin.Word // users: %34, %36
  %34 = builtin "cmp_eq_RawPointer"(%33 : $Builtin.RawPointer, %8 : $Builtin.RawPointer) : $Builtin.Int1 // user: %35
  cond_br %34, bb1, bb10                          // id: %35

bb10:                                             // Preds: bb9
  br bb4(%33 : $Builtin.RawPointer)               // id: %36

bb11:                                             // Preds: bb6
  strong_release %1 : $@callee_owned (UInt16) -> (Bool, @error ErrorType) // id: %37
  throw %27 : $ErrorType                          // id: %38
}

// Swift._StringCore._claimCapacity (Swift.Int, minElementWidth : Swift.Int) -> (Swift.Int, Swift.COpaquePointer)
sil hidden_external [fragile] @_TFVs11_StringCore14_claimCapacityfTSi15minElementWidthSi_TSiVs14COpaquePointer_ : $@convention(method) (Int, Int, @inout _StringCore) -> (Int, COpaquePointer)

// Swift._StringCore._copyInPlace (newSize : Swift.Int, newCapacity : Swift.Int, minElementWidth : Swift.Int) -> ()
sil hidden_external [fragile] @_TFVs11_StringCore12_copyInPlacefT7newSizeSi11newCapacitySi15minElementWidthSi_T_ : $@convention(method) (Int, Int, Int, @inout _StringCore) -> ()

// function signature specialization <Arg[0] = Owned To Guaranteed> of Swift._cocoaStringReadAll (Swift.AnyObject, Swift.UnsafeMutablePointer<Swift.UInt16>) -> ()
sil [fragile] [noinline] [_semantics "stdlib_binary_only"] @_TTSf4g_n___TFs19_cocoaStringReadAllFTPs9AnyObject_GSpVs6UInt16__T_ : $@convention(thin) (@guaranteed AnyObject, UnsafeMutablePointer<UInt16>) -> ()

// reabstraction thunk helper from @callee_owned (@unowned Swift.UInt16) -> (@unowned Swift.Bool, @error @owned Swift.ErrorType) to @callee_owned (@in Swift.UInt16) -> (@unowned Swift.Bool, @error @owned Swift.ErrorType)
sil shared_external [transparent] [fragile] [reabstraction_thunk] @_TTRXFo_dVs6UInt16_dSbzoPs9ErrorType__XFo_iS__dSbzoPS0___ : $@convention(thin) (@in UInt16, @owned @callee_owned (UInt16) -> (Bool, @error ErrorType)) -> (Bool, @error ErrorType) {
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $*UInt16, %1 : $@callee_owned (UInt16) -> (Bool, @error ErrorType)):
  %2 = load %0 : $*UInt16                         // user: %3
  try_apply %1(%2) : $@callee_owned (UInt16) -> (Bool, @error ErrorType), normal bb1, error bb2 // id: %3

// %4                                             // user: %5
bb1(%4 : $Bool):                                  // Preds: bb0
  return %4 : $Bool                               // id: %5

// %6                                             // user: %7
bb2(%6 : $ErrorType):                             // Preds: bb0
  throw %6 : $ErrorType                           // id: %7
}

// protocol witness for Swift._BuiltinIntegerLiteralConvertible.init (_builtinIntegerLiteral : Builtin.Int2048) -> A in conformance Swift.Int : Swift._BuiltinIntegerLiteralConvertible in Swift
sil [transparent] [fragile] [thunk] @_TTWSis33_BuiltinIntegerLiteralConvertiblesFS_CfT22_builtinIntegerLiteralBi2048__x : $@convention(witness_method) (@out Int, Builtin.Int2048, @thick Int.Type) -> ()

// protocol witness for Swift.IntegerLiteralConvertible.init (integerLiteral : A.IntegerLiteralType) -> A in conformance Swift.Int : Swift.IntegerLiteralConvertible in Swift
sil [transparent] [fragile] [thunk] @_TTWSis25IntegerLiteralConvertiblesFS_CfT14integerLiteralwx18IntegerLiteralType_x : $@convention(witness_method) (@out Int, @in Int, @thick Int.Type) -> ()

// protocol witness for static Swift.SignedNumberType.- prefix (A) -> A in conformance Swift.Int : Swift.SignedNumberType in Swift
sil [transparent] [fragile] [thunk] @_TTWSis16SignedNumberTypesZFS_op1sfxx : $@convention(witness_method) (@out Int, @in Int, @thick Int.Type) -> ()

// protocol witness for static Swift.SignedNumberType.- infix (A, A) -> A in conformance Swift.Int : Swift.SignedNumberType in Swift
sil [transparent] [fragile] [thunk] @_TTWSis16SignedNumberTypesZFS_oi1sfTxx_x : $@convention(witness_method) (@out Int, @in Int, @in Int, @thick Int.Type) -> ()

// protocol witness for static Swift.SignedNumberType.~> infix (A, (Swift._Abs, ())) -> A in conformance Swift.Int : Swift.SignedNumberType in Swift
sil [transparent] [fragile] [thunk] @_TTWSis16SignedNumberTypesZFS_oi2tgfTxTVs4_AbsT___x : $@convention(witness_method) (@out Int, @in Int, _Abs, @thick Int.Type) -> ()

// function signature specialization <Arg[0] = Exploded, Arg[1] = Exploded, Arg[2] = Exploded> of Swift._assertionFailed (Swift.StaticString, Swift.String, Swift.StaticString, Swift.UInt) -> ()
sil [fragile] [noinline] [_semantics "stdlib_binary_only"] @_TTSf4s_s_s_n___TFs16_assertionFailedFTVs12StaticStringSSS_Su_T_ : $@convention(thin) @noreturn (Builtin.RawPointer, Builtin.Word, Builtin.Int8, Builtin.RawPointer, Builtin.Int64, @owned Optional<AnyObject>, Builtin.RawPointer, Builtin.Word, Builtin.Int8, UInt) -> ()

// Swift.(fatalError (@autoclosure () -> Swift.String, file : Swift.StaticString, line : Swift.UInt) -> ()).(default argument 0).(implicit closure #1)
sil [transparent] [fragile] @_TFIFs10fatalErrorFTKT_SS4fileVs12StaticString4lineSu_T_A_u_KT_SS : $@convention(thin) () -> @owned String

// protocol witness for static Swift.Comparable.< infix (A, A) -> Swift.Bool in conformance Swift.Int : Swift.Comparable in Swift
sil [transparent] [fragile] [thunk] @_TTWSis10ComparablesZFS_oi1lfTxx_Sb : $@convention(witness_method) (@in Int, @in Int, @thick Int.Type) -> Bool

// protocol witness for static Swift.Comparable.<= infix (A, A) -> Swift.Bool in conformance Swift.Int : Swift.Comparable in Swift
sil [transparent] [fragile] [thunk] @_TTWSis10ComparablesZFS_oi2lefTxx_Sb : $@convention(witness_method) (@in Int, @in Int, @thick Int.Type) -> Bool

// protocol witness for static Swift.Comparable.>= infix (A, A) -> Swift.Bool in conformance Swift.Int : Swift.Comparable in Swift
sil [transparent] [fragile] [thunk] @_TTWSis10ComparablesZFS_oi2gefTxx_Sb : $@convention(witness_method) (@in Int, @in Int, @thick Int.Type) -> Bool

// protocol witness for static Swift.Comparable.> infix (A, A) -> Swift.Bool in conformance Swift.Int : Swift.Comparable in Swift
sil [transparent] [fragile] [thunk] @_TTWSis10ComparablesZFS_oi1gfTxx_Sb : $@convention(witness_method) (@in Int, @in Int, @thick Int.Type) -> Bool

// Swift.HalfOpenInterval.contains (A) -> Swift.Bool
sil [fragile] @_TFVs16HalfOpenInterval8containsfxSb : $@convention(method) <Bound where Bound : Comparable> (@in Bound, @in_guaranteed HalfOpenInterval<Bound>) -> Bool

// Swift.HalfOpenInterval.init (A, A) -> Swift.HalfOpenInterval<A>
sil [fragile] @_TFVs16HalfOpenIntervalCfTxx_GS_x_ : $@convention(thin) <Bound where Bound : Comparable> (@out HalfOpenInterval<Bound>, @in Bound, @in Bound, @thin HalfOpenInterval<Bound>.Type) -> ()

// Swift.HalfOpenInterval.start.getter : A
sil [fragile] @_TFVs16HalfOpenIntervalg5startx : $@convention(method) <Bound where Bound : Comparable> (@out Bound, @in_guaranteed HalfOpenInterval<Bound>) -> ()

// Swift.HalfOpenInterval.end.getter : A
sil [fragile] @_TFVs16HalfOpenIntervalg3endx : $@convention(method) <Bound where Bound : Comparable> (@out Bound, @in_guaranteed HalfOpenInterval<Bound>) -> ()

// static Swift.ManagedBufferPointer._valueOffset.getter : Swift.Int
sil hidden_external [fragile] @_TZFVs20ManagedBufferPointerg12_valueOffsetSi : $@convention(thin) <Value, Element> (@thin ManagedBufferPointer<Value, Element>.Type) -> Int

// Swift.ManagedBufferPointer.init (_uncheckedUnsafeBufferObject : Swift.AnyObject) -> Swift.ManagedBufferPointer<A, B>
sil hidden_external [fragile] @_TFVs20ManagedBufferPointerCfT28_uncheckedUnsafeBufferObjectPs9AnyObject__GS_xq__ : $@convention(thin) <Value, Element> (@owned AnyObject, @thin ManagedBufferPointer<Value, Element>.Type) -> @owned ManagedBufferPointer<Value, Element>

// Swift._ContiguousArrayBuffer._initStorageHeader (Swift.Int, capacity : Swift.Int) -> ()
sil hidden_external [fragile] @_TFVs22_ContiguousArrayBuffer18_initStorageHeaderfTSi8capacitySi_T_ : $@convention(method) <Element> (Int, Int, @guaranteed _ContiguousArrayBuffer<Element>) -> ()

// Swift._ContiguousArrayBuffer._storage.getter : Swift._ContiguousArrayStorageBase
sil hidden_external [fragile] @_TFVs22_ContiguousArrayBufferg8_storageCs27_ContiguousArrayStorageBase : $@convention(method) <Element> (@guaranteed _ContiguousArrayBuffer<Element>) -> @owned _ContiguousArrayStorageBase

// Swift._ArrayBuffer.init () -> Swift._ArrayBuffer<A>
sil [fragile] @_TFVs12_ArrayBufferCfT_GS_x_ : $@convention(thin) <Element> (@thin _ArrayBuffer<Element>.Type) -> @owned _ArrayBuffer<Element>

// static Swift.Array._allocateBufferUninitialized (Swift.Int) -> Swift._ArrayBuffer<A>
sil hidden_external [fragile] [noinline] @_TZFSa28_allocateBufferUninitializedfSiGVs12_ArrayBufferx_ : $@convention(thin) <Element> (Int, @thin Array<Element>.Type) -> @owned _ArrayBuffer<Element>

// Swift._ArrayBuffer.count.setter : Swift.Int
sil [fragile] @_TFVs12_ArrayBuffers5countSi : $@convention(method) <Element> (Int, @inout _ArrayBuffer<Element>) -> ()

// Swift._ArrayBuffer._isNative.getter : Swift.Bool
sil hidden_external [fragile] @_TFVs12_ArrayBufferg9_isNativeSb : $@convention(method) <Element> (@guaranteed _ArrayBuffer<Element>) -> Bool

// Swift._ArrayBuffer._native.getter : Swift._ContiguousArrayBuffer<A>
sil hidden_external [fragile] @_TFVs12_ArrayBufferg7_nativeGVs22_ContiguousArrayBufferx_ : $@convention(method) <Element> (@guaranteed _ArrayBuffer<Element>) -> @owned _ContiguousArrayBuffer<Element>

// Swift.ManagedBufferPointer._valuePointer.getter : Swift.UnsafeMutablePointer<A>
sil hidden_external [fragile] @_TFVs20ManagedBufferPointerg13_valuePointerGSpx_ : $@convention(method) <Value, Element> (@guaranteed ManagedBufferPointer<Value, Element>) -> UnsafeMutablePointer<Value>

// Swift.ManagedBufferPointer._address.getter : Swift.UnsafePointer<Swift.UInt8>
sil hidden_external [fragile] @_TFVs20ManagedBufferPointerg8_addressGSPVs5UInt8_ : $@convention(method) <Value, Element> (@guaranteed ManagedBufferPointer<Value, Element>) -> UnsafePointer<UInt8>

// Swift._bridgeToObjectiveC <A> (A) -> Swift.Optional<Swift.AnyObject>
sil [fragile] @_TFs19_bridgeToObjectiveCurFxGSqPs9AnyObject__ : $@convention(thin) <T> (@in T) -> @owned Optional<AnyObject>

// Swift._isClassOrObjCExistential <A> (A.Type) -> Swift.Bool
sil hidden_external [fragile] [always_inline] @_TFs25_isClassOrObjCExistentialurFMxSb : $@convention(thin) <T> (@thick T.Type) -> Bool

// Swift.UnsafeMutablePointer.destroy (Swift.Int) -> ()
sil [fragile] @_TFSp7destroyfSiT_ : $@convention(method) <Memory> (Int, UnsafeMutablePointer<Memory>) -> ()

// static Swift.ManagedBufferPointer.(_sanityCheckValidBufferClass (Swift.AnyObject.Type, creating : Swift.Bool) -> ()).(default argument 1)
sil hidden_external [fragile] @_TIZFVs20ManagedBufferPointer28_sanityCheckValidBufferClassFTPMPs9AnyObject_8creatingSb_T_A0_ : $@convention(thin) <Value, Element> () -> Bool

// swift_bridgeNonVerbatimToObjectiveC
sil hidden_external [fragile] @swift_bridgeNonVerbatimToObjectiveC : $@convention(thin) <τ_0_0> (@in τ_0_0) -> @owned Optional<AnyObject>

// swift_isClassOrObjCExistentialType
sil hidden_external [fragile] @swift_isClassOrObjCExistentialType : $@convention(thin) <τ_0_0> (@thick τ_0_0.Type) -> Bool

// Swift.UnsafeMutablePointer.destroy () -> ()
sil [fragile] @_TFSp7destroyfT_T_ : $@convention(method) <Memory> (UnsafeMutablePointer<Memory>) -> ()

// Swift._HeapBuffer.init (Swift._HeapBufferStorage<A, B>) -> Swift._HeapBuffer<A, B>
sil [fragile] @_TFVs11_HeapBufferCfGCs18_HeapBufferStoragexq__GS_xq__ : $@convention(thin) <Value, Element> (@owned _HeapBufferStorage<Value, Element>, @thin _HeapBuffer<Value, Element>.Type) -> @owned _HeapBuffer<Value, Element>

// Swift._HeapBuffer._value.getter : Swift.UnsafeMutablePointer<A>
sil hidden_external [fragile] @_TFVs11_HeapBufferg6_valueGSpx_ : $@convention(method) <Value, Element> (@guaranteed _HeapBuffer<Value, Element>) -> UnsafeMutablePointer<Value>

// static Swift._HeapBuffer._valueOffset () -> Swift.Int
sil hidden_external [fragile] @_TZFVs11_HeapBuffer12_valueOffsetfT_Si : $@convention(thin) <Value, Element> (@thin _HeapBuffer<Value, Element>.Type) -> Int

// Swift._HeapBuffer._address.getter : Swift.UnsafeMutablePointer<Swift.Int8>
sil hidden_external [fragile] @_TFVs11_HeapBufferg8_addressGSpVs4Int8_ : $@convention(method) <Value, Element> (@guaranteed _HeapBuffer<Value, Element>) -> UnsafeMutablePointer<Int8>

// generic specialization <Swift.String> of Swift._ArrayBuffer._getElementSlowPath (Swift.Int) -> Swift.AnyObject
sil [noinline] @_TTSg5SS___TFVs12_ArrayBuffer19_getElementSlowPathfSiPs9AnyObject_ : $@convention(method) (Int, @guaranteed _ArrayBuffer<String>) -> @owned AnyObject

// Swift._ContiguousArrayBuffer.init (count : Swift.Int, minimumCapacity : Swift.Int) -> Swift._ContiguousArrayBuffer<A>
sil [fragile] @_TFVs22_ContiguousArrayBufferCfT5countSi15minimumCapacitySi_GS_x_ : $@convention(thin) <Element> (Int, Int, @thin _ContiguousArrayBuffer<Element>.Type) -> @owned _ContiguousArrayBuffer<Element>

// Swift._ContiguousArrayBuffer.count.setter : Swift.Int
sil [fragile] @_TFVs22_ContiguousArrayBuffers5countSi : $@convention(method) <Element> (Int, @guaranteed _ContiguousArrayBuffer<Element>) -> ()

// Swift._ContiguousArrayBuffer.init (Swift._ContiguousArrayStorageBase) -> Swift._ContiguousArrayBuffer<A>
sil hidden_external [fragile] @_TFVs22_ContiguousArrayBufferCfCs27_ContiguousArrayStorageBaseGS_x_ : $@convention(thin) <Element> (@owned _ContiguousArrayStorageBase, @thin _ContiguousArrayBuffer<Element>.Type) -> @owned _ContiguousArrayBuffer<Element>

// function signature specialization <Arg[0] = Exploded> of Swift._StringBuffer.grow (Swift.Range<Swift.UnsafePointer<Swift.RawByte>>, newUsedCount : Swift.Int) -> Swift.Bool
sil hidden_external [fragile] @_TTSf4s_n_n___TFVs13_StringBuffer4growfTGVs5RangeGSPVs7RawByte__12newUsedCountSi_Sb : $@convention(method) (Builtin.RawPointer, Builtin.RawPointer, Int, @inout _StringBuffer) -> Bool

// Swift._StringBuffer.capacity.getter : Swift.Int
sil [fragile] @_TFVs13_StringBufferg8capacitySi : $@convention(method) (@guaranteed _StringBuffer) -> Int

// Swift._StringCore.(cocoaBuffer.getter : Swift.Optional<Swift.AnyObject>).(closure #1)
sil shared_external [fragile] @_TFFVs11_StringCoreg11cocoaBufferGSqPs9AnyObject__U_FPS0__PS0__ : $@convention(thin) (@owned AnyObject) -> @owned AnyObject {
// %0                                             // users: %1, %2
bb0(%0 : $AnyObject):
  debug_value %0 : $AnyObject                     // id: %1
  return %0 : $AnyObject                          // id: %2
}

// reabstraction thunk helper from @callee_owned (@owned Swift.AnyObject) -> (@owned Swift.AnyObject, @error @owned Swift.ErrorType) to @callee_owned (@in Swift.AnyObject) -> (@out Swift.AnyObject, @error @owned Swift.ErrorType)
sil shared_external [transparent] [fragile] [reabstraction_thunk] @_TTRXFo_oPs9AnyObject__oPS__zoPs9ErrorType__XFo_iPS___iPS__zoPS0___ : $@convention(thin) (@out AnyObject, @in AnyObject, @owned @callee_owned (@owned AnyObject) -> (@owned AnyObject, @error ErrorType)) -> @error ErrorType {
// %0                                             // user: %6
// %1                                             // user: %3
// %2                                             // user: %4
bb0(%0 : $*AnyObject, %1 : $*AnyObject, %2 : $@callee_owned (@owned AnyObject) -> (@owned AnyObject, @error ErrorType)):
  %3 = load %1 : $*AnyObject                      // user: %4
  try_apply %2(%3) : $@callee_owned (@owned AnyObject) -> (@owned AnyObject, @error ErrorType), normal bb1, error bb2 // id: %4

// %5                                             // user: %6
bb1(%5 : $AnyObject):                             // Preds: bb0
  store %5 to %0 : $*AnyObject                    // id: %6
  %7 = tuple ()                                   // user: %8
  return %7 : $()                                 // id: %8

// %9                                             // user: %10
bb2(%9 : $ErrorType):                             // Preds: bb0
  throw %9 : $ErrorType                           // id: %10
}

// function signature specialization <Arg[1] = Dead, Arg[2] = Dead> of static Swift.UTF8._isValidUTF8 (Swift.UInt32, validBytes : Swift.UInt8) -> Swift.Bool
sil hidden_external [fragile] @_TTSf4n_d_d___TZFVs4UTF812_isValidUTF8fTVs6UInt3210validBytesVs5UInt8_Sb : $@convention(thin) (UInt32) -> Bool

// function signature specialization <Arg[2] = Dead> of static Swift.UTF8._findMaximalSubpartOfIllFormedUTF8Sequence (Swift.UInt32, validBytes : Swift.UInt8) -> Swift.UInt8
sil hidden_external [fragile] [noinline] @_TTSf4n_n_d___TZFVs4UTF842_findMaximalSubpartOfIllFormedUTF8SequencefTVs6UInt3210validBytesVs5UInt8_S1_ : $@convention(thin) (UInt32, UInt8) -> UInt8

// _swift_stdlib_malloc_size
sil @_swift_stdlib_malloc_size : $@convention(c) (UnsafePointer<()>) -> Int

// generic specialization <Swift._StringBufferIVars, Swift.UInt16> of Swift._HeapBuffer._value.getter : Swift.UnsafeMutablePointer<A>
sil shared_external [fragile] @_TTSg5Vs18_StringBufferIVars_Vs6UInt16___TFVs11_HeapBufferg6_valueGSpx_ : $@convention(method) (@guaranteed _HeapBuffer<_StringBufferIVars, UInt16>) -> UnsafeMutablePointer<_StringBufferIVars> {
// %0                                             // users: %1, %12, %13, %14
bb0(%0 : $_HeapBuffer<_StringBufferIVars, UInt16>):
  debug_value %0 : $_HeapBuffer<_StringBufferIVars, UInt16> // id: %1
  %2 = metatype $@thick HeapObject.Type           // user: %3
  %3 = builtin "sizeof"<HeapObject>(%2 : $@thick HeapObject.Type) : $Builtin.Word // user: %4
  %4 = builtin "zextOrBitCast_Word_Int64"(%3 : $Builtin.Word) : $Builtin.Int64 // user: %9
  %5 = metatype $@thick _StringBufferIVars.Type   // user: %6
  %6 = builtin "alignof"<_StringBufferIVars>(%5 : $@thick _StringBufferIVars.Type) : $Builtin.Word // user: %7
  %7 = builtin "zextOrBitCast_Word_Int64"(%6 : $Builtin.Word) : $Builtin.Int64 // users: %9, %21
  %8 = integer_literal $Builtin.Int1, -1          // user: %9
  %9 = builtin "sadd_with_overflow_Int64"(%4 : $Builtin.Int64, %7 : $Builtin.Int64, %8 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %10, %16
  %10 = tuple_extract %9 : $(Builtin.Int64, Builtin.Int1), 1 // user: %11
  cond_fail %10 : $Builtin.Int1                   // id: %11
  debug_value %0 : $_HeapBuffer<_StringBufferIVars, UInt16> // id: %12
  debug_value %0 : $_HeapBuffer<_StringBufferIVars, UInt16> // id: %13
  %14 = struct_extract %0 : $_HeapBuffer<_StringBufferIVars, UInt16>, #_HeapBuffer._storage // users: %15, %26
  switch_enum %14 : $Optional<Builtin.NativeObject>, case #Optional.Some!enumelt.1: bb1, case #Optional.None!enumelt: bb2 // id: %15

bb1:                                              // Preds: bb0
  %16 = tuple_extract %9 : $(Builtin.Int64, Builtin.Int1), 0 // user: %19
  %17 = integer_literal $Builtin.Int64, 1         // users: %19, %21
  %18 = integer_literal $Builtin.Int1, 0          // users: %19, %21, %31
  %19 = builtin "ssub_with_overflow_Int64"(%16 : $Builtin.Int64, %17 : $Builtin.Int64, %18 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %20
  %20 = tuple_extract %19 : $(Builtin.Int64, Builtin.Int1), 0 // user: %25
  %21 = builtin "ssub_with_overflow_Int64"(%7 : $Builtin.Int64, %17 : $Builtin.Int64, %18 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %22
  %22 = tuple_extract %21 : $(Builtin.Int64, Builtin.Int1), 0 // user: %24
  %23 = integer_literal $Builtin.Int64, -1        // user: %24
  %24 = builtin "xor_Int64"(%22 : $Builtin.Int64, %23 : $Builtin.Int64) : $Builtin.Int64 // user: %25
  %25 = builtin "and_Int64"(%20 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int64 // user: %31
  %26 = unchecked_enum_data %14 : $Optional<Builtin.NativeObject>, #Optional.Some!enumelt.1 // user: %27
  %27 = ref_to_raw_pointer %26 : $Builtin.NativeObject to $Builtin.RawPointer // user: %34
  %28 = metatype $@thick Int8.Type                // user: %29
  %29 = builtin "strideof_nonzero"<Int8>(%28 : $@thick Int8.Type) : $Builtin.Word // user: %30
  %30 = builtin "zextOrBitCast_Word_Int64"(%29 : $Builtin.Word) : $Builtin.Int64 // user: %31
  %31 = builtin "smul_with_overflow_Int64"(%25 : $Builtin.Int64, %30 : $Builtin.Int64, %18 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %32
  %32 = tuple_extract %31 : $(Builtin.Int64, Builtin.Int1), 0 // user: %33
  %33 = builtin "truncOrBitCast_Int64_Word"(%32 : $Builtin.Int64) : $Builtin.Word // user: %34
  %34 = index_raw_pointer %27 : $Builtin.RawPointer, %33 : $Builtin.Word // user: %35
  %35 = struct $UnsafeMutablePointer<_StringBufferIVars> (%34 : $Builtin.RawPointer) // user: %36
  return %35 : $UnsafeMutablePointer<_StringBufferIVars> // id: %36

bb2:                                              // Preds: bb0
  br bb3                                          // id: %37

bb3:                                              // Preds: bb2
  %38 = string_literal utf8 "unexpectedly found nil while unwrapping an Optional value" // user: %44
  %39 = integer_literal $Builtin.Word, 57         // user: %44
  %40 = integer_literal $Builtin.Int8, 2          // users: %44, %44
  %41 = string_literal utf8 "fatal error"         // user: %44
  %42 = integer_literal $Builtin.Word, 11         // user: %44
  // function_ref function signature specialization <Arg[0] = Exploded, Arg[1] = Exploded, Arg[2] = Dead, Arg[3] = Dead> of Swift._fatalErrorMessage (Swift.StaticString, Swift.StaticString, Swift.StaticString, Swift.UInt) -> ()
  %43 = function_ref @_TTSf4s_s_d_d___TFs18_fatalErrorMessageFTVs12StaticStringS_S_Su_T_ : $@convention(thin) @noreturn (Builtin.RawPointer, Builtin.Word, Builtin.Int8, Builtin.RawPointer, Builtin.Word, Builtin.Int8) -> () // user: %44
  %44 = apply %43(%41, %42, %40, %38, %39, %40) : $@convention(thin) @noreturn (Builtin.RawPointer, Builtin.Word, Builtin.Int8, Builtin.RawPointer, Builtin.Word, Builtin.Int8) -> ()
  unreachable                                     // id: %45
}

// Swift._ContiguousArrayBuffer.init () -> Swift._ContiguousArrayBuffer<A>
sil [fragile] @_TFVs22_ContiguousArrayBufferCfT_GS_x_ : $@convention(thin) <Element> (@thin _ContiguousArrayBuffer<Element>.Type) -> @owned _ContiguousArrayBuffer<Element>

// Swift.ManagedBufferPointer.allocatedElementCount.getter : Swift.Int
sil [fragile] @_TFVs20ManagedBufferPointerg21allocatedElementCountSi : $@convention(method) <Value, Element> (@guaranteed ManagedBufferPointer<Value, Element>) -> Int

// Swift._HeapBuffer._nativeObject.getter : Builtin.NativeObject
sil hidden_external [fragile] @_TFVs11_HeapBufferg13_nativeObjectBo : $@convention(method) <Value, Element> (@guaranteed _HeapBuffer<Value, Element>) -> @owned Builtin.NativeObject

// Swift.ManagedBufferPointer._allocatedByteCount.getter : Swift.Int
sil hidden_external [fragile] @_TFVs20ManagedBufferPointerg19_allocatedByteCountSi : $@convention(method) <Value, Element> (@guaranteed ManagedBufferPointer<Value, Element>) -> Int

// Swift._ContiguousArrayStorageBase._getNonVerbatimBridgedCount () -> Swift.Int
sil hidden_external [fragile] [thunk] @_TFCs27_ContiguousArrayStorageBase27_getNonVerbatimBridgedCountfT_Si : $@convention(method) (@guaranteed _ContiguousArrayStorageBase) -> Int

// Swift._ContiguousArrayStorageBase._getNonVerbatimBridgedHeapBuffer () -> Swift._HeapBuffer<Swift.Int, Swift.AnyObject>
sil hidden_external [fragile] [thunk] @_TFCs27_ContiguousArrayStorageBase32_getNonVerbatimBridgedHeapBufferfT_GVs11_HeapBufferSiPs9AnyObject__ : $@convention(method) (@guaranteed _ContiguousArrayStorageBase) -> @owned _HeapBuffer<Int, AnyObject>

// Swift._ContiguousArrayStorageBase.staticElementType.getter : protocol<>.Type
sil hidden_external [fragile] [thunk] @_TFCs27_ContiguousArrayStorageBaseg17staticElementTypePMP_ : $@convention(method) (@guaranteed _ContiguousArrayStorageBase) -> @thick protocol<>.Type

// Swift._ContiguousArrayStorage1._withVerbatimBridgedUnsafeBufferImpl ((Swift.UnsafeBufferPointer<Swift.AnyObject>) throws -> ()) throws -> ()
sil hidden_external [fragile] [thunk] @_TFCs24_ContiguousArrayStorage136_withVerbatimBridgedUnsafeBufferImplfzFzGSRPs9AnyObject__T_T_ : $@convention(method) (@owned @callee_owned (UnsafeBufferPointer<AnyObject>) -> @error ErrorType, @guaranteed _ContiguousArrayStorage1) -> @error ErrorType

// Swift._ContiguousArrayStorage1.__deallocating_deinit
sil hidden_external [fragile] @_TFCs24_ContiguousArrayStorage1D : $@convention(method) (@owned _ContiguousArrayStorage1) -> ()

// Swift._ContiguousArrayStorageBase.__deallocating_deinit
sil hidden_external [fragile] @_TFCs27_ContiguousArrayStorageBaseD : $@convention(method) (@owned _ContiguousArrayStorageBase) -> ()

// Swift._SwiftNativeNSArrayWithContiguousStorage.withUnsafeBufferOfObjects <A> ((Swift.UnsafeBufferPointer<Swift.AnyObject>) throws -> A) throws -> A
sil hidden_external [fragile] @_TFCs40_SwiftNativeNSArrayWithContiguousStorage25withUnsafeBufferOfObjectsurfzFzGSRPs9AnyObject__xx : $@convention(method) <τ_0_0> (@out τ_0_0, @owned @callee_owned (@out τ_0_0, UnsafeBufferPointer<AnyObject>) -> @error ErrorType, @guaranteed _SwiftNativeNSArrayWithContiguousStorage) -> @error ErrorType

// Swift._SwiftNativeNSArrayWithContiguousStorage.__deallocating_deinit
sil hidden_external [fragile] @_TFCs40_SwiftNativeNSArrayWithContiguousStorageD : $@convention(method) (@owned _SwiftNativeNSArrayWithContiguousStorage) -> ()

// Swift._SwiftNativeNSArray.__deallocating_deinit
sil hidden_external [fragile] @_TFCs19_SwiftNativeNSArrayD : $@convention(method) (@owned _SwiftNativeNSArray) -> ()

// Swift.NonObjectiveCBase.init () -> Swift.NonObjectiveCBase
sil [fragile] @_TFCs17NonObjectiveCBasecfT_S_ : $@convention(method) (@owned NonObjectiveCBase) -> @owned NonObjectiveCBase

// Swift.NonObjectiveCBase.__deallocating_deinit
sil [fragile] @_TFCs17NonObjectiveCBaseD : $@convention(method) (@owned NonObjectiveCBase) -> ()

// generic specialization <protocol<>> of Swift._allocateUninitializedArray <A> (Builtin.Word) -> (Swift.Array<A>, Builtin.RawPointer)
sil [always_inline] @_TTSg5P____TFs27_allocateUninitializedArrayurFBwTGSax_Bp_ : $@convention(thin) (Builtin.Word) -> @owned (Array<protocol<>>, Builtin.RawPointer)

// generic specialization <Swift.String> of Swift._allocateUninitializedArray <A> (Builtin.Word) -> (Swift.Array<A>, Builtin.RawPointer)
sil [always_inline] @_TTSg5SS___TFs27_allocateUninitializedArrayurFBwTGSax_Bp_ : $@convention(thin) (Builtin.Word) -> @owned (Array<String>, Builtin.RawPointer)

sil_vtable Node {
  #Node.init!initializer.1: _TFC4Node4NodecfxGS0_x_	// Node.Node.init (A) -> Node.Node<A>
  #Node.deinit!deallocator: _TFC4Node4NodeD	// Node.Node.__deallocating_deinit
}

sil_vtable _ContiguousArrayStorage {
  #_SwiftNativeNSArray.init!initializer.1: _TFCs23_ContiguousArrayStoragecfT_GS_x_	// Swift._ContiguousArrayStorage.init () -> Swift._ContiguousArrayStorage<A>
  #_SwiftNativeNSArrayWithContiguousStorage.withUnsafeBufferOfObjects!1: _TFCs27_ContiguousArrayStorageBase25withUnsafeBufferOfObjectsurfzFzGSRPs9AnyObject__xx	// Swift._ContiguousArrayStorageBase.withUnsafeBufferOfObjects <A> ((Swift.UnsafeBufferPointer<Swift.AnyObject>) throws -> A) throws -> A
  #_ContiguousArrayStorageBase._withVerbatimBridgedUnsafeBuffer!1: _TFCs24_ContiguousArrayStorage132_withVerbatimBridgedUnsafeBufferurfzFzGSRPs9AnyObject__xGSqx_	// Swift._ContiguousArrayStorage1._withVerbatimBridgedUnsafeBuffer <A> ((Swift.UnsafeBufferPointer<Swift.AnyObject>) throws -> A) throws -> Swift.Optional<A>
  #_ContiguousArrayStorageBase._getNonVerbatimBridgedCount!1: _TFCs23_ContiguousArrayStorage27_getNonVerbatimBridgedCountfT_Si	// Swift._ContiguousArrayStorage._getNonVerbatimBridgedCount () -> Swift.Int
  #_ContiguousArrayStorageBase._getNonVerbatimBridgedHeapBuffer!1: _TFCs23_ContiguousArrayStorage32_getNonVerbatimBridgedHeapBufferfT_GVs11_HeapBufferSiPs9AnyObject__	// Swift._ContiguousArrayStorage._getNonVerbatimBridgedHeapBuffer () -> Swift._HeapBuffer<Swift.Int, Swift.AnyObject>
  #_ContiguousArrayStorageBase.staticElementType!getter.1: _TFCs23_ContiguousArrayStorageg17staticElementTypePMP_	// Swift._ContiguousArrayStorage.staticElementType.getter : protocol<>.Type
  #_ContiguousArrayStorage1._withVerbatimBridgedUnsafeBufferImpl!1: _TFCs23_ContiguousArrayStorage36_withVerbatimBridgedUnsafeBufferImplfzFzGSRPs9AnyObject__T_T_	// Swift._ContiguousArrayStorage._withVerbatimBridgedUnsafeBufferImpl ((Swift.UnsafeBufferPointer<Swift.AnyObject>) throws -> ()) throws -> ()
  #_ContiguousArrayStorage.deinit!deallocator: _TFCs23_ContiguousArrayStorageD	// Swift._ContiguousArrayStorage.__deallocating_deinit
}

sil_vtable _HeapBufferStorage {
  #NonObjectiveCBase.init!initializer.1: _TFCs18_HeapBufferStoragecfT_GS_xq__	// Swift._HeapBufferStorage.init () -> Swift._HeapBufferStorage<A, B>
  #_HeapBufferStorage.deinit!deallocator: _TFCs18_HeapBufferStorageD	// Swift._HeapBufferStorage.__deallocating_deinit
}

sil_vtable _ContiguousArrayStorage1 {
  #_SwiftNativeNSArrayWithContiguousStorage.withUnsafeBufferOfObjects!1: _TFCs27_ContiguousArrayStorageBase25withUnsafeBufferOfObjectsurfzFzGSRPs9AnyObject__xx	// Swift._ContiguousArrayStorageBase.withUnsafeBufferOfObjects <A> ((Swift.UnsafeBufferPointer<Swift.AnyObject>) throws -> A) throws -> A
  #_ContiguousArrayStorageBase._withVerbatimBridgedUnsafeBuffer!1: _TFCs24_ContiguousArrayStorage132_withVerbatimBridgedUnsafeBufferurfzFzGSRPs9AnyObject__xGSqx_	// Swift._ContiguousArrayStorage1._withVerbatimBridgedUnsafeBuffer <A> ((Swift.UnsafeBufferPointer<Swift.AnyObject>) throws -> A) throws -> Swift.Optional<A>
  #_ContiguousArrayStorageBase._getNonVerbatimBridgedCount!1: _TFCs27_ContiguousArrayStorageBase27_getNonVerbatimBridgedCountfT_Si	// Swift._ContiguousArrayStorageBase._getNonVerbatimBridgedCount () -> Swift.Int
  #_ContiguousArrayStorageBase._getNonVerbatimBridgedHeapBuffer!1: _TFCs27_ContiguousArrayStorageBase32_getNonVerbatimBridgedHeapBufferfT_GVs11_HeapBufferSiPs9AnyObject__	// Swift._ContiguousArrayStorageBase._getNonVerbatimBridgedHeapBuffer () -> Swift._HeapBuffer<Swift.Int, Swift.AnyObject>
  #_ContiguousArrayStorageBase.staticElementType!getter.1: _TFCs27_ContiguousArrayStorageBaseg17staticElementTypePMP_	// Swift._ContiguousArrayStorageBase.staticElementType.getter : protocol<>.Type
  #_ContiguousArrayStorage1._withVerbatimBridgedUnsafeBufferImpl!1: _TFCs24_ContiguousArrayStorage136_withVerbatimBridgedUnsafeBufferImplfzFzGSRPs9AnyObject__T_T_	// Swift._ContiguousArrayStorage1._withVerbatimBridgedUnsafeBufferImpl ((Swift.UnsafeBufferPointer<Swift.AnyObject>) throws -> ()) throws -> ()
  #_ContiguousArrayStorage1.deinit!deallocator: _TFCs24_ContiguousArrayStorage1D	// Swift._ContiguousArrayStorage1.__deallocating_deinit
}

sil_vtable _ContiguousArrayStorageBase {
  #_SwiftNativeNSArrayWithContiguousStorage.withUnsafeBufferOfObjects!1: _TFCs27_ContiguousArrayStorageBase25withUnsafeBufferOfObjectsurfzFzGSRPs9AnyObject__xx	// Swift._ContiguousArrayStorageBase.withUnsafeBufferOfObjects <A> ((Swift.UnsafeBufferPointer<Swift.AnyObject>) throws -> A) throws -> A
  #_ContiguousArrayStorageBase._withVerbatimBridgedUnsafeBuffer!1: _TFCs27_ContiguousArrayStorageBase32_withVerbatimBridgedUnsafeBufferurfzFzGSRPs9AnyObject__xGSqx_	// Swift._ContiguousArrayStorageBase._withVerbatimBridgedUnsafeBuffer <A> ((Swift.UnsafeBufferPointer<Swift.AnyObject>) throws -> A) throws -> Swift.Optional<A>
  #_ContiguousArrayStorageBase._getNonVerbatimBridgedCount!1: _TFCs27_ContiguousArrayStorageBase27_getNonVerbatimBridgedCountfT_Si	// Swift._ContiguousArrayStorageBase._getNonVerbatimBridgedCount () -> Swift.Int
  #_ContiguousArrayStorageBase._getNonVerbatimBridgedHeapBuffer!1: _TFCs27_ContiguousArrayStorageBase32_getNonVerbatimBridgedHeapBufferfT_GVs11_HeapBufferSiPs9AnyObject__	// Swift._ContiguousArrayStorageBase._getNonVerbatimBridgedHeapBuffer () -> Swift._HeapBuffer<Swift.Int, Swift.AnyObject>
  #_ContiguousArrayStorageBase.staticElementType!getter.1: _TFCs27_ContiguousArrayStorageBaseg17staticElementTypePMP_	// Swift._ContiguousArrayStorageBase.staticElementType.getter : protocol<>.Type
  #_ContiguousArrayStorageBase.deinit!deallocator: _TFCs27_ContiguousArrayStorageBaseD	// Swift._ContiguousArrayStorageBase.__deallocating_deinit
}

sil_vtable _SwiftNativeNSArrayWithContiguousStorage {
  #_SwiftNativeNSArrayWithContiguousStorage.withUnsafeBufferOfObjects!1: _TFCs40_SwiftNativeNSArrayWithContiguousStorage25withUnsafeBufferOfObjectsurfzFzGSRPs9AnyObject__xx	// Swift._SwiftNativeNSArrayWithContiguousStorage.withUnsafeBufferOfObjects <A> ((Swift.UnsafeBufferPointer<Swift.AnyObject>) throws -> A) throws -> A
  #_SwiftNativeNSArrayWithContiguousStorage.deinit!deallocator: _TFCs40_SwiftNativeNSArrayWithContiguousStorageD	// Swift._SwiftNativeNSArrayWithContiguousStorage.__deallocating_deinit
}

sil_vtable _SwiftNativeNSArray {
  #_SwiftNativeNSArray.deinit!deallocator: _TFCs19_SwiftNativeNSArrayD	// Swift._SwiftNativeNSArray.__deallocating_deinit
}

sil_vtable NonObjectiveCBase {
  #NonObjectiveCBase.init!initializer.1: _TFCs17NonObjectiveCBasecfT_S_	// Swift.NonObjectiveCBase.init () -> Swift.NonObjectiveCBase
  #NonObjectiveCBase.deinit!deallocator: _TFCs17NonObjectiveCBaseD	// Swift.NonObjectiveCBase.__deallocating_deinit
}

sil_witness_table <T where T : Comparable, T : CustomStringConvertible> Node<T>: CustomStringConvertible module Node {
  method #CustomStringConvertible.description!getter.1: @_TTWuRxs10Comparablexs23CustomStringConvertiblerGC4Node4Nodex_S0_S1_FS0_g11descriptionSS	// protocol witness for Swift.CustomStringConvertible.description.getter : Swift.String in conformance <A where A: Swift.Comparable, A: Swift.CustomStringConvertible> Node.Node<A> : Swift.CustomStringConvertible in Node
}

sil_witness_table _SwiftNativeNSArray: AnyObject module Swift

sil_witness_table NonObjectiveCBase: AnyObject module Swift

sil_witness_table public_external [fragile] Int: SignedNumberType module Swift {
  base_protocol Comparable: Int: Comparable module Swift
  base_protocol IntegerLiteralConvertible: Int: IntegerLiteralConvertible module Swift
  method #SignedNumberType."-"!1: @_TTWSis16SignedNumberTypesZFS_op1sfxx	// protocol witness for static Swift.SignedNumberType.- prefix (A) -> A in conformance Swift.Int : Swift.SignedNumberType in Swift
  method #SignedNumberType."-"!1: @_TTWSis16SignedNumberTypesZFS_oi1sfTxx_x	// protocol witness for static Swift.SignedNumberType.- infix (A, A) -> A in conformance Swift.Int : Swift.SignedNumberType in Swift
  method #SignedNumberType."~>"!1: @_TTWSis16SignedNumberTypesZFS_oi2tgfTxTVs4_AbsT___x	// protocol witness for static Swift.SignedNumberType.~> infix (A, (Swift._Abs, ())) -> A in conformance Swift.Int : Swift.SignedNumberType in Swift
}

sil_witness_table public_external [fragile] Int: IntegerLiteralConvertible module Swift {
  associated_type IntegerLiteralType: Int
  associated_type_protocol (IntegerLiteralType: _BuiltinIntegerLiteralConvertible): Int: _BuiltinIntegerLiteralConvertible module Swift
  method #IntegerLiteralConvertible.init!allocator.1: @_TTWSis25IntegerLiteralConvertiblesFS_CfT14integerLiteralwx18IntegerLiteralType_x	// protocol witness for Swift.IntegerLiteralConvertible.init (integerLiteral : A.IntegerLiteralType) -> A in conformance Swift.Int : Swift.IntegerLiteralConvertible in Swift
}

sil_witness_table public_external [fragile] Int: _BuiltinIntegerLiteralConvertible module Swift {
  method #_BuiltinIntegerLiteralConvertible.init!allocator.1: @_TTWSis33_BuiltinIntegerLiteralConvertiblesFS_CfT22_builtinIntegerLiteralBi2048__x	// protocol witness for Swift._BuiltinIntegerLiteralConvertible.init (_builtinIntegerLiteral : Builtin.Int2048) -> A in conformance Swift.Int : Swift._BuiltinIntegerLiteralConvertible in Swift
}

sil_witness_table public_external [fragile] Int: Comparable module Swift {
  base_protocol Equatable: Int: Equatable module Swift
  method #Comparable."<"!1: @_TTWSis10ComparablesZFS_oi1lfTxx_Sb	// protocol witness for static Swift.Comparable.< infix (A, A) -> Swift.Bool in conformance Swift.Int : Swift.Comparable in Swift
  method #Comparable."<="!1: @_TTWSis10ComparablesZFS_oi2lefTxx_Sb	// protocol witness for static Swift.Comparable.<= infix (A, A) -> Swift.Bool in conformance Swift.Int : Swift.Comparable in Swift
  method #Comparable.">="!1: @_TTWSis10ComparablesZFS_oi2gefTxx_Sb	// protocol witness for static Swift.Comparable.>= infix (A, A) -> Swift.Bool in conformance Swift.Int : Swift.Comparable in Swift
  method #Comparable.">"!1: @_TTWSis10ComparablesZFS_oi1gfTxx_Sb	// protocol witness for static Swift.Comparable.> infix (A, A) -> Swift.Bool in conformance Swift.Int : Swift.Comparable in Swift
}



